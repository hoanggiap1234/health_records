package com.viettel.etc.controllers;import com.viettel.etc.dto.MedicalHealthcareRegimenDTO;import com.viettel.etc.dto.RegimenRequestDTO;import com.viettel.etc.services.MedicalHealthcareRegimenService;import com.viettel.etc.services.tables.MedicalHealthcareRegimensServiceJPA;import com.viettel.etc.utils.ErrorApp;import com.viettel.etc.utils.FnCommon;import com.viettel.etc.utils.TeleCareException;import com.viettel.etc.xlibrary.core.constants.FunctionCommon;import org.apache.log4j.Logger;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.http.MediaType;import org.springframework.http.ResponseEntity;import org.springframework.security.core.Authentication;import org.springframework.security.core.annotation.AuthenticationPrincipal;import org.springframework.web.bind.annotation.*;/** * Autogen class: * * @author ToolGen * @date Tue Oct 13 09:50:35 ICT 2020 */@RestControllerpublic class MedicalHealthcareRegimenController {	@Autowired	private MedicalHealthcareRegimenService medicalHealthcareRegimenService;	@Autowired	private MedicalHealthcareRegimensServiceJPA medicalHealthcareRegimenServiceJPA;	private static final Logger LOGGER = Logger.getLogger(MedicalHealthcareAllergyController.class);	/**	 * @param authentication: thong tin nguoi dung	 * @param dataParams      params client	 * @return	 */	@GetMapping(value = "/{patientId}/healthcare-regimens", produces = MediaType.APPLICATION_JSON_VALUE)	public ResponseEntity<Object> getHealthcareRegimens(@AuthenticationPrincipal Authentication authentication,														@PathVariable Integer patientId, MedicalHealthcareRegimenDTO dataParams) {		dataParams.setPatientId(patientId);		try {			Object resultObj = medicalHealthcareRegimenService.getHealthcareRegimens(dataParams, authentication);			return new ResponseEntity<>(FunctionCommon.responseToClient(resultObj), HttpStatus.OK);		} catch (TeleCareException e) {			return new ResponseEntity<>(FnCommon.responseToClient(e), HttpStatus.OK);		} catch (Exception e) {			LOGGER.info(e);			return new ResponseEntity<>(FnCommon.responseToClient(ErrorApp.UNKNOW_ERROR), HttpStatus.OK);		}	}	@PostMapping(value = "/{patientId}/healthcare-regimens", produces = MediaType.APPLICATION_JSON_VALUE)	public ResponseEntity<Object> createHealthcareRegimens(@AuthenticationPrincipal Authentication authentication,														   @PathVariable Integer patientId,														   @RequestBody RegimenRequestDTO dataParams) {		dataParams.setPatientId(patientId);		Object resultObj = null;		try {			resultObj = medicalHealthcareRegimenServiceJPA.createHealthcareRegimens(dataParams, authentication);		} catch (TeleCareException e) {			return new ResponseEntity<>(FnCommon.responseToClient(e), HttpStatus.OK);		} catch (Exception e) {			LOGGER.info(e);			return new ResponseEntity<>(FnCommon.responseToClient(ErrorApp.ERR_REGIMEN_CREATE_FAIL), HttpStatus.OK);		}		return new ResponseEntity<>(resultObj, HttpStatus.OK);	}	@PutMapping(value = "/{patientId}/healthcare-regimens/{patientRegimenId}", produces = MediaType.APPLICATION_JSON_VALUE)	public ResponseEntity<Object> updateHealthcareRegimens(@AuthenticationPrincipal Authentication authentication,														   @PathVariable Integer patientId,														   @PathVariable Integer patientRegimenId,														   @RequestBody MedicalHealthcareRegimenDTO dataParams) {		Object resultObj = null;		dataParams.setPatientId(patientId);		dataParams.setPatientRegimenId(patientRegimenId);		try {			resultObj = medicalHealthcareRegimenServiceJPA.updateHealthcareRegimens(dataParams, authentication);		} catch (TeleCareException e) {			return new ResponseEntity<>(FnCommon.responseToClient(e), HttpStatus.OK);		} catch (Exception e) {			LOGGER.info(e);			return new ResponseEntity<>(FnCommon.responseToClient(ErrorApp.ERR_REGIMEN_UPDATE_FAIL), HttpStatus.OK);		}		return new ResponseEntity<>(resultObj, HttpStatus.OK);	}	@DeleteMapping(value = "/{patientId}/healthcare-regimens/{patientRegimenId}", produces = MediaType.APPLICATION_JSON_VALUE)	public ResponseEntity<Object> deletePatientRegimen(@AuthenticationPrincipal Authentication authentication,													   @PathVariable Integer patientId,													   @PathVariable Integer patientRegimenId,													   MedicalHealthcareRegimenDTO dataParams) {		Object resultObj = null;		try {			resultObj = medicalHealthcareRegimenServiceJPA.deletePatientRegimen(dataParams, authentication);		} catch (TeleCareException e) {			return new ResponseEntity<>(FnCommon.responseToClient(e), HttpStatus.OK);		} catch (Exception e) {			LOGGER.info(e);			return new ResponseEntity<>(FnCommon.responseToClient(ErrorApp.ERR_REGIMEN_DELETE_FAIL), HttpStatus.OK);		}		return new ResponseEntity<>(resultObj, HttpStatus.OK);	}}