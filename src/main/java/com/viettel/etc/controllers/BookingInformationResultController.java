package com.viettel.etc.controllers;import com.viettel.etc.dto.BookingInformationResultDTO;import com.viettel.etc.kafka.domain.healthcare_result.HealthcareInsuranceResultEntity;import com.viettel.etc.services.BookingInformationResultService;import com.viettel.etc.services.tables.MedicalHealthcareHistoriesServiceJPA;import com.viettel.etc.utils.ErrorApp;import com.viettel.etc.utils.FnCommon;import com.viettel.etc.utils.TeleCareException;import com.viettel.etc.xlibrary.core.constants.FunctionCommon;import org.apache.log4j.Logger;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.http.MediaType;import org.springframework.http.ResponseEntity;import org.springframework.security.core.Authentication;import org.springframework.security.core.annotation.AuthenticationPrincipal;import org.springframework.web.bind.annotation.*;/** * Autogen class: * * @author ToolGen * @date Thu Aug 27 15:41:46 ICT 2020 */@RestControllerpublic class BookingInformationResultController {	private static final Logger LOGGER = Logger.getLogger(BookingInformationResultController.class);	@Autowired	MedicalHealthcareHistoriesServiceJPA medicalHealthcareHistoriesServiceJPA;	@Autowired	private BookingInformationResultService bookingInformationResultService;	/**	 * api lay danh sach tu van tu xa	 *	 * @param authentication: thong tin nguoi dung	 * @param dataParams      params client	 * @return	 */	@GetMapping(value = "/{patientId}/booking-information-results", produces = MediaType.APPLICATION_JSON_VALUE)	public ResponseEntity<Object> getBookingInformationResult(@AuthenticationPrincipal Authentication authentication,															  @PathVariable Integer patientId, BookingInformationResultDTO dataParams) {		dataParams.setPatientId(patientId);		Object resultObj = null;		try {			resultObj = bookingInformationResultService.getBookingInformationResult(dataParams, authentication);		} catch (TeleCareException e) {			return new ResponseEntity<>(FnCommon.responseToClient(e), HttpStatus.BAD_REQUEST);		}		return new ResponseEntity<>(FunctionCommon.responseToClient(resultObj), HttpStatus.OK);	}	/**	 * api save consultant result	 *	 * @param authentication: thong tin nguoi dung	 * @param dataParams      params client	 * @return	 */	@PostMapping(value = "save-healthcare-insurance-result-bhxh", produces = MediaType.APPLICATION_JSON_VALUE)	public ResponseEntity<Object> saveHealthcareInsuranceResultBhxh(@AuthenticationPrincipal Authentication authentication,																	@RequestBody HealthcareInsuranceResultEntity dataParams) {		try {			medicalHealthcareHistoriesServiceJPA.saveHealthcareInsuranceResultBhxh(dataParams);		} catch (TeleCareException e) {			return new ResponseEntity<>(FnCommon.responseToClient(e), HttpStatus.OK);		} catch (Exception e) {			LOGGER.info(e);			e.printStackTrace();			return new ResponseEntity<>(FnCommon.responseToClient(new TeleCareException(ErrorApp.UNKNOW_ERROR)), HttpStatus.OK);		}		return new ResponseEntity<>(FnCommon.responseToClient(dataParams), HttpStatus.OK);	}}