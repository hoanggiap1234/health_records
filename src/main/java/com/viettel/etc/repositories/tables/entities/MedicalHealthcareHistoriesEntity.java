package com.viettel.etc.repositories.tables.entities;import com.viettel.etc.utils.Constants;import lombok.Data;import lombok.NoArgsConstructor;import org.hibernate.annotations.UpdateTimestamp;import javax.persistence.*;import java.io.Serializable;import java.time.LocalDateTime;import java.util.Date;import java.util.Objects;/** * Autogen class Entity: Create Entity For Table Name Medical_healthcare_histories * * @author ToolGen * @date Fri Nov 06 13:56:14 ICT 2020 */@Data@NoArgsConstructor@Entity@Table(name = "MEDICAL_HEALTHCARE_HISTORIES")public class MedicalHealthcareHistoriesEntity implements Serializable {	@Id	@GeneratedValue(strategy = GenerationType.IDENTITY)	@Column(name = "HISTORIES_ID")	Integer historiesId;	@Column(name = "HIS_ID")	String hisId;	@Column(name = "PATIENT_ID")	Integer patientId;	@Column(name = "EXAMINATION_DATE")	Date examinationDate;	@Column(name = "FINISH_EXAMINATION_DATE")	Date finishExaminationDate;	@Column(name = "TREATMENT_DAY_NUMBER")	Integer treatmentDayNumber;	@Column(name = "DOCTOR_NAME")	String doctorName;	@Column(name = "PHONE_NUMBER")	String phoneNumber;	@Column(name = "DOCTOR_ID")	Integer doctorId;	@Column(name = "HEALTHFACILITIES_CODE")	String healthfacilitiesCode;	@Column(name = "HEALTHFACILITIES_NAME")	String healthfacilitiesName;	@Column(name = "REASONS_MEDICALEXAMINATION")	String reasonsMedicalexamination;	@Column(name = "SYMPTOMS")	String symptoms;	@Column(name = "RIGHT_EYE_WITH_GLASSES")	String rightEyeWithGlasses;	@Column(name = "LEFT_EYE_WITH_GLASSES")	String leftEyeWithGlasses;	@Column(name = "RIGHT_EYE_WITHOUT_GLASSES")	String rightEyeWithoutGlasses;	@Column(name = "LEFT_EYE_WITHOUT_GLASSES")	String leftEyeWithoutGlasses;	@Column(name = "BODY_SKIN")	String bodySkin;	@Column(name = "BODY_SKIN_OTHER")	String bodySkinOther;	@Column(name = "BODY_PART_HEART")	String bodyPartHeart;	@Column(name = "BODY_PART_RESPIRATORY")	String bodyPartRespiratory;	@Column(name = "BODY_PART_DIGEST")	String bodyPartDigest;	@Column(name = "BODY_PART_URINARY")	String bodyPartUrinary;	@Column(name = "BODY_PART_OSTEOARTHRITIS")	String bodyPartOsteoarthritis;	@Column(name = "BODY_PART_ENDOCRINE")	String bodyPartEndocrine;	@Column(name = "BODY_PART_NERVE")	String bodyPartNerve;	@Column(name = "BODY_PART_MENTAL")	String bodyPartMental;	@Column(name = "BODY_PART_SURGICAL")	String bodyPartSurgical;	@Column(name = "BODY_PART_GYNECOLOGY")	String bodyPartGynecology;	@Column(name = "BODY_PART_EAR_NOSE_THROAT")	String bodyPartEarNoseThroat;	@Column(name = "BODY_PART_DENTOMAXILLOFACIAL")	String bodyPartDentomaxillofacial;	@Column(name = "BODY_PART_EYE")	String bodyPartEye;	@Column(name = "BODY_PART_SKIN")	String bodyPartSkin;	@Column(name = "BODY_PART_NUTRITION")	String bodyPartNutrition;	@Column(name = "BODY_PART_MOTIVE")	String bodyPartMotive;	@Column(name = "BODY_PART_EVALUATION")	String bodyPartEvaluation;	@Column(name = "BODY_PART_OTHER")	String bodyPartOther;	@Column(name = "CONCLUDES_DISEASE")	String concludesDisease;	@Column(name = "TREATMENT_DIRECTION")	String treatmentDirection;	@Column(name = "RE_EXAMINATION_DATE")	LocalDateTime reExaminationDate;	@Column(name = "TYPE_OF_EXAMINATION")	Integer typeOfExamination;	@Column(name = "DIGITAL_SIGNATURES")	String digitalSignatures;	@Column(name = "IS_DELETE")	Integer isDelete;	@Column(name = "IS_ACTIVE")	Integer isActive;	@Column(name = "IS_SYNC")	Integer isSync;	@Column(name = "CREATE_USER_ID")	Integer createUserId;	@Column(name = "CREATE_DATE")	Date createDate = new Date();	@Column(name = "UPDATE_USER_ID")	Integer updateUserId;	@Column(name = "UPDATE_DATE")	@UpdateTimestamp	Date updateDate;	@Column(name = "QUANTITY")	Integer quantity;	@PrePersist	public void createDefaultProperti() {		if (this.isActive == null) {			this.isActive = Constants.IS_ACTIVE;		}		if (this.isDelete == null) {			this.isDelete = Constants.IS_NOT_DELETE;		}		if (this.isSync == null) {			this.isSync = Constants.IS_NOT_SYNC;		}		if (this.createDate == null) {			this.createDate = new Date();		}	}	@Override	public boolean equals(Object o) {		if (this == o) return true;		if (o == null || getClass() != o.getClass()) return false;		MedicalHealthcareHistoriesEntity that = (MedicalHealthcareHistoriesEntity) o;		long thisFinishTime = finishExaminationDate!=null? finishExaminationDate.getTime() : 1L;		long thatfinishTime = that.finishExaminationDate!=null? that.finishExaminationDate.getTime() : 1L;		return examinationDate.getTime()==that.examinationDate.getTime() &&				thisFinishTime == thatfinishTime &&				healthfacilitiesCode.equals(that.healthfacilitiesCode) &&				concludesDisease.equals(that.concludesDisease);	}	@Override	public int hashCode() {		return Objects.hash(examinationDate, finishExaminationDate, healthfacilitiesCode, concludesDisease);	}}