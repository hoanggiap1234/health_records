package com.viettel.etc.repositories.tables.entities;import com.viettel.etc.utils.Constants;import lombok.Data;import lombok.EqualsAndHashCode;import lombok.NoArgsConstructor;import lombok.ToString;import org.hibernate.annotations.CreationTimestamp;import org.hibernate.annotations.UpdateTimestamp;import javax.persistence.*;import java.io.Serializable;import java.util.Date;import java.util.List;import java.util.Objects;/** * Autogen class Entity: Create Entity For Table Name Medical_healthcare_services * * @author ToolGen * @date Fri Sep 25 10:13:14 ICT 2020 */@Data@NoArgsConstructor@Entity@Table(name = "MEDICAL_HEALTHCARE_SERVICES")public class MedicalHealthcareServicesEntity implements Serializable {	@Id	@GeneratedValue(strategy = GenerationType.IDENTITY)	@Column(name = "SERVICE_ID")	Integer serviceId;	@Column(name = "HISTORIES_ID")	Integer historiesId;	@Column(name = "PATIENT_ID")	Integer patientId;	@Column(name = "HEALTHFACILITIES_CODE")	String healthfacilitiesCode;	@Column(name = "SERVICE_NAME")	String serviceName;	@Column(name = "SERVICE_CODE")	String serviceCode;	@Column(name = "GROUP_ID")	Integer groupId;	@Column(name = "QUANTITY")	Integer quantity;	@Column(name = "UNIT")	String unit;	@Column(name = "CONCLUDES")	String concludes;	@Column(name = "RESULTS")	String results;	@Column(name = "SUGGESTIONS")	String suggestions;	@Column(name = "LINK_VIEW_DICOM")	String linkViewDicom;	@Column(name = "PHONE_NUMBER")	String phoneNumber;	@Column(name = "DECISION_DATE")	Date decisionDate;	@Column(name = "HIS_ID")	String hisId;	@Column(name = "IS_DELETE")	Integer isDelete;	@Column(name = "IS_ACTIVE")	Integer isActive;	@Column(name = "IS_SYNC")	Integer isSync;	@Column(name = "CREATE_USER_ID")	Integer createUserId;	@Column(name = "UPDATE_USER_ID")	Integer updateUserId;	@Column(name = "CREATE_DATE")	@CreationTimestamp	Date createDate = new Date();	@Column(name = "UPDATE_DATE")	@UpdateTimestamp	Date updateDate;	@OneToMany(mappedBy = "sercive", cascade = CascadeType.ALL)	@EqualsAndHashCode.Exclude	@ToString.Exclude	private List<MedicalHealthcareServicesResultsEntity> serviceResults;	@OneToMany(mappedBy = "sercive", cascade = CascadeType.ALL)	@EqualsAndHashCode.Exclude	@ToString.Exclude	private List<MedicalHealthcareHistoriesAttachmentsEntity> serviceAttachments;	public void inferproperti() {		for (MedicalHealthcareServicesResultsEntity serviceResult : serviceResults) {			serviceResult.setSercive(this);		}		for (MedicalHealthcareHistoriesAttachmentsEntity serviceAttachment : serviceAttachments) {			serviceAttachment.setSercive(this);		}	}	@PrePersist	public void createDefaultProperti() {		if (this.isActive == null) {			this.isActive = Constants.IS_ACTIVE;		}		if (this.isDelete == null) {			this.isDelete = Constants.IS_NOT_DELETE;		}		if (this.isSync == null) {			this.isSync = Constants.IS_NOT_SYNC;		}		if (this.createDate == null) {			this.createDate = new Date();		}	}	@Override	public boolean equals(Object o) {		if (this == o) return true;		if (o == null || getClass() != o.getClass()) return false;		MedicalHealthcareServicesEntity that = (MedicalHealthcareServicesEntity) o;		return historiesId.equals(that.historiesId) &&				serviceName.equals(that.serviceName);	}	@Override	public int hashCode() {		return Objects.hash(historiesId, healthfacilitiesCode, serviceName);	}}