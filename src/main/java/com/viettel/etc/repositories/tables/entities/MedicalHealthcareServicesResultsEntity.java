package com.viettel.etc.repositories.tables.entities;import com.fasterxml.jackson.annotation.JsonBackReference;import com.viettel.etc.utils.Constants;import lombok.Data;import lombok.NoArgsConstructor;import javax.persistence.*;import java.io.Serializable;import java.util.Date;import java.util.Objects;/** * Autogen class Entity: Create Entity For Table Name Medical_healthcare_services_results * * @author ToolGen * @date Thu Nov 05 14:23:25 ICT 2020 */@Data@NoArgsConstructor@Entity@Table(name = "MEDICAL_HEALTHCARE_SERVICES_RESULTS")public class MedicalHealthcareServicesResultsEntity implements Serializable {	@Id	@GeneratedValue(strategy = GenerationType.IDENTITY)	@Column(name = "RESULT_ID")	Integer resultId;	@Column(name = "HISTORIES_ID")	Integer historiesId;	@Column(name = "HIS_ID")	String hisId;	@Column(name = "SERVICE_CODE")	String serviceCode;	@Column(name = "ORDER_NUMBER")	Integer orderNumber;	@Column(name = "INDEX_CODE")	String indexCode;	@Column(name = "INDEX_NAME")	String indexName;	@Column(name = "VALUE")	String value;	@Column(name = "UNIT")	String unit;	@Column(name = "`LIMIT`")	String limit;	@Column(name = "IS_DELETE")	Integer isDelete = Constants.IS_NOT_DELETE;	@Column(name = "IS_ACTIVE")	Integer isActive = Constants.IS_ACTIVE;	@Column(name = "IS_SYNC")	Integer isSync = Constants.IS_NOT_SYNC;	@Column(name = "CREATE_USER_ID")	Integer createUserId;	@Column(name = "CREATE_DATE")	Date createDate = new Date();	@Column(name = "UPDATE_USER_ID")	Integer updateUserId;	@Column(name = "UPDATE_DATE")	Date updateDate;	@ManyToOne(cascade = CascadeType.ALL)	@JoinColumn(name = "SERVICE_ID")	@JsonBackReference	private MedicalHealthcareServicesEntity sercive;	@Override	public boolean equals(Object o) {		if (this == o) return true;		if (o == null || getClass() != o.getClass()) return false;		MedicalHealthcareServicesResultsEntity that = (MedicalHealthcareServicesResultsEntity) o;		return Objects.equals(historiesId, that.historiesId) &&				sercive.getServiceCode().equals(that.sercive.getServiceCode()) &&				indexCode.equals(that.indexCode) &&				Objects.equals(sercive.serviceId, that.sercive.serviceId);	}	@Override	public int hashCode() {		return Objects.hash(historiesId, serviceCode, indexCode, sercive);	}}