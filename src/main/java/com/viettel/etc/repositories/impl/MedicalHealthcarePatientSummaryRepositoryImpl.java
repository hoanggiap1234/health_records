package com.viettel.etc.repositories.impl;import com.viettel.etc.controllers.MedicalHealthcareAllergyController;import com.viettel.etc.dto.HealthcareOverviewDto;import com.viettel.etc.dto.MedicalHealthcarePatientSummaryDTO;import com.viettel.etc.repositories.MedicalHealthcarePatientSummaryRepository;import com.viettel.etc.repositories.tables.MedicalHealthcarePatientSummaryRepositoryJPA;import com.viettel.etc.repositories.tables.entities.MedicalHealthcarePatientSummaryEntity;import com.viettel.etc.utils.ErrorApp;import com.viettel.etc.utils.FnCommon;import com.viettel.etc.utils.TeleCareException;import com.viettel.etc.xlibrary.core.repositories.CommonDataBaseRepository;import org.apache.commons.beanutils.BeanUtils;import org.apache.log4j.Logger;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Repository;import java.lang.reflect.Field;import java.util.*;/** * Autogen class Repository Impl: * * @author ToolGen * @date Mon Sep 14 08:36:29 ICT 2020 */@Repositorypublic class MedicalHealthcarePatientSummaryRepositoryImpl extends CommonDataBaseRepository implements MedicalHealthcarePatientSummaryRepository {	private static final Logger LOGGER = Logger.getLogger(MedicalHealthcareAllergyController.class);	/*DEMO*/	@Autowired	MedicalHealthcarePatientSummaryRepositoryJPA medicalHealthcarePatientSummaryRepositoryJPA;	/**	 * api get patient overview	 *	 * @param itemParamsEntity : params client truyen len	 * @return	 */	@Override	public Object getPatientOverview(MedicalHealthcarePatientSummaryDTO itemParamsEntity) throws TeleCareException {		StringBuilder patientSql = new StringBuilder();		patientSql.append("select fullname, phone_number as phoneNumber, gender_id as genderId, birthday, patient_id as id from patients ");		patientSql.append("where patient_id=").append(itemParamsEntity.getPatientId());		HealthcareOverviewDto.Patient patient = (HealthcareOverviewDto.Patient) getFirstData(patientSql, new HashMap<>(), HealthcareOverviewDto.Patient.class);		if (patient == null) {			FnCommon.throwsErrorApp(ErrorApp.ERR_DATA_PATIENT_NOT_EXIST);		}		StringBuilder sql = new StringBuilder();		sql.append("select " +				"mh.summary_id as summaryId, " +				"mh.patient_id as patientId, " +				"mh.blood_sugar as bloodSugar, " +				"mh.spo2_score as spo2Score, " +				"mh.blood_pressure as bloodPressure, " +				"mh.heart_beat as heartBeat, " +				"mh.temperature as temperature, " +				"mh.height as height, " +				"mh.weight as weight, " +				"mh.bmi as bmi, " +				"mh.result_date as resultDate, " +				"mh.blood_abo as bloodAbo, " +				"mh.blood_rh as bloodRh, " +				"mh.diseases " +				"from medical_healthcare_patient_summary mh " +				"where 1=1 ");		sql.append("and mh.patient_id =").append(itemParamsEntity.getPatientId());		sql.append(" order by mh.result_date desc");/*		if (getCountData(sql, new HashMap<>()) == 0) {			fakeDataDemo(itemParamsEntity.getPatientId());		}*/		List<MedicalHealthcarePatientSummaryDTO> indexs = (List<MedicalHealthcarePatientSummaryDTO>) getListData(sql, new HashMap<>(), null, null, MedicalHealthcarePatientSummaryDTO.class);		HashMap<String, HealthcareOverviewDto.HealthcareIndex> mapIndex = new HashMap<>();		if (indexs.size() > 0) {			List<String> fieldIndex = Arrays.asList("bloodSugar", "spo2Score", "bloodPressure", "heartBeat", "temperature", "height", "weight", "bmi", "bloodAbo", "bloodRh", "diseases");			Field[] fields = MedicalHealthcarePatientSummaryDTO.class.getDeclaredFields();			for (MedicalHealthcarePatientSummaryDTO index : indexs) {				for (Field field : fields) {					field.setAccessible(true);					try {						if (fieldIndex.contains(field.getName()) && field.get(index) != null) {							mapIndex.put(field.getName(), new HealthcareOverviewDto.HealthcareIndex(field.get(index), index.getResultDate()));						}					} catch (Exception e) {						LOGGER.info(e);					}				}			}		}		HealthcareOverviewDto result = new HealthcareOverviewDto();		result.setPatient(patient);		result.setHealthcareIndex(mapIndex);		return result;	}	private void fakeDataDemo(int patientId) {		try {			Random random = new Random();			MedicalHealthcarePatientSummaryDTO dto = new MedicalHealthcarePatientSummaryDTO();			dto.setPatientId(patientId);			dto.setBloodSugar((double) (random.nextInt(140 - 80) + 80));			dto.setSpo2Score(random.nextInt(99 - 90) + 90);			dto.setBloodPressure("112/78");			dto.setHeartBeat(random.nextInt(140 - 40) + 40);			dto.setTemperature((35 + (39 - 35) * random.nextDouble()));			dto.setBmi(dto.getBmi());			Date now = new Date();			long time = now.getTime() - 60000 * 1440;			dto.setResultDate(new Date(time));			dto.setBloodAbo("B");			dto.setBloodRh("H");			List<MedicalHealthcarePatientSummaryEntity> updates = new ArrayList<>();			List<MedicalHealthcarePatientSummaryEntity> entities = medicalHealthcarePatientSummaryRepositoryJPA.findByPatientId(dto.getPatientId());			Field[] dtoFields = dto.getClass().getDeclaredFields();			List<String> fieldUpdate = Arrays.asList("bloodSugar", "spo2Score", "bloodPressure", "heartBeat", "temperature", "height", "weight", "bmi", "bloodAbo", "bloodRh", "diseases");			for (Field dtoField : dtoFields) {				dtoField.setAccessible(true);				if (!fieldUpdate.contains(dtoField.getName()) || dtoField.get(dto) == null) {					continue;				}				MedicalHealthcarePatientSummaryEntity entityNew = new MedicalHealthcarePatientSummaryEntity();				for (MedicalHealthcarePatientSummaryEntity entity : entities) {					Field entityField = entity.getClass().getDeclaredField(dtoField.getName());					entityField.setAccessible(true);					if (entityField.get(entity) != null) {						entityNew = entity;						break;					}				}				BeanUtils.setProperty(entityNew, dtoField.getName(), dtoField.get(dto));				BeanUtils.setProperty(entityNew, "resultDate", dto.getResultDate());				BeanUtils.setProperty(entityNew, "patientId", dto.getPatientId());				updates.add(entityNew);			}			if (!updates.isEmpty()) {				medicalHealthcarePatientSummaryRepositoryJPA.saveAll(updates);			}		} catch (Exception e) {			LOGGER.info(e);			e.printStackTrace();		}	}}