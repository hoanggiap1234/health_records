package com.viettel.etc.repositories.impl;import com.viettel.etc.dto.MedicalHealthcarePresurgeryDTO;import com.viettel.etc.repositories.MedicalHealthcarePresurgeryRepository;import com.viettel.etc.utils.Constants;import com.viettel.etc.xlibrary.core.repositories.CommonDataBaseRepository;import org.springframework.stereotype.Repository;import java.util.HashMap;import java.util.List;/** * Autogen class Repository Impl: * * @author ToolGen * @date Tue Sep 22 11:31:19 ICT 2020 */@Repositorypublic class MedicalHealthcarePresurgeryRepositoryImpl extends CommonDataBaseRepository implements MedicalHealthcarePresurgeryRepository {    /**     * api get medical healthcare presurgery     *     * @param itemParamsEntity: params client truyen len     * @return     */    @Override    public List<MedicalHealthcarePresurgeryDTO> getMedicalHealthcarePresurgery(MedicalHealthcarePresurgeryDTO itemParamsEntity) {        StringBuilder sql = new StringBuilder();        HashMap<String, Object> hmapParams = new HashMap<>();        sql.append("SELECT mhp.presurgery_id AS presurgeryId ,mhp.histories_id AS historiesId, mhp.relationship_id AS relationshipId, cr.name AS relationshipName, mhp.surgical_surgery_name AS surgicalSurgeryName, mhp.healthfacilities_code AS healthfacilitiesCode, ch.name AS healthfacilitiesName, mhp.year_of_surgery AS yearOfSurgery, mhp.reason_of_surgery AS reasonOfSurgery, mhp.side_effect_of_surgery AS sideEffectOfSurgery, CAST(mhp.is_sync AS int) AS isSync");        sql.append(" FROM medical_healthcare_presurgery mhp");        sql.append(" LEFT JOIN cats_relationships cr");        sql.append(" ON mhp.relationship_id = cr.relationship_Id AND cr.is_active = 1 AND cr.is_delete = 0 ");        sql.append(" LEFT JOIN cats_healthfacilities ch");        sql.append(" ON mhp.healthfacilities_code = ch.healthfacilities_code AND ch.is_active = 1 AND ch.is_delete = 0 ");        sql.append(" WHERE mhp.is_active = 1 AND mhp.is_delete = 0  ");        if (itemParamsEntity != null && itemParamsEntity.getPatientId() != null) {            sql.append(" AND (mhp.patient_id = :patientId");            hmapParams.put("patientId", itemParamsEntity.getPatientId());        }        if (itemParamsEntity != null && itemParamsEntity.getPhoneNumber() != null) {            sql.append(" OR mhp.phone_number LIKE CONCAT('%', :phoneNumber, '%')");            hmapParams.put("phoneNumber", itemParamsEntity.getPhoneNumber());        }        sql.append(")");        Integer start = Constants.START_RECORD_DEFAULT;        if (itemParamsEntity != null && itemParamsEntity.getStartrecord() != null) {            start = itemParamsEntity.getStartrecord();        }        Integer pageSize = Constants.PAGE_SIZE_DEFAULT;        if (itemParamsEntity != null && itemParamsEntity.getPagesize() != null) {            pageSize = itemParamsEntity.getPagesize();        }        List<MedicalHealthcarePresurgeryDTO> listData = (List<MedicalHealthcarePresurgeryDTO>) getListData(sql, hmapParams, start, pageSize, MedicalHealthcarePresurgeryDTO.class);        return listData;    }}