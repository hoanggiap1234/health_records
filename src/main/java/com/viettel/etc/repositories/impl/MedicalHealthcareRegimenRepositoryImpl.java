package com.viettel.etc.repositories.impl;import com.viettel.etc.dto.MedicalHealthcareRegimenDTO;import com.viettel.etc.repositories.MedicalHealthcareRegimenRepository;import com.viettel.etc.repositories.tables.SysUsersRepositoryJPA;import com.viettel.etc.utils.Constants;import com.viettel.etc.utils.TeleCareException;import com.viettel.etc.utils.TelecareUserEntity;import com.viettel.etc.xlibrary.core.entities.ResultSelectEntity;import com.viettel.etc.xlibrary.core.repositories.CommonDataBaseRepository;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Repository;import java.util.HashMap;/** * Autogen class Repository Impl: * * @author ToolGen * @date Tue Oct 13 09:50:36 ICT 2020 */@Repositorypublic class MedicalHealthcareRegimenRepositoryImpl extends CommonDataBaseRepository implements MedicalHealthcareRegimenRepository {	@Autowired	SysUsersRepositoryJPA sysUsersRepositoryJPA;	/**	 * @param dto: params client truyen len	 * @return	 */	@Override	public ResultSelectEntity getHealthcareRegimens(MedicalHealthcareRegimenDTO dto, TelecareUserEntity userEntity) throws TeleCareException {		StringBuilder sql = new StringBuilder();		sql.append("select mhr.patient_regimen_id as patientRegimenId, d.doctorId, d.doctorName, car.code as academicRankCode, cd.code as degreeCode, mhr.name,total_time as totalTime, mhr.from_date as fromDate, mhr.to_date as toDate, ");		sql.append("case when DATE_FORMAT(from_date, '%Y-%m-%d') <= CURRENT_DATE() and CURRENT_DATE() <= DATE_FORMAT(to_date , '%Y-%m-%d') then 1 ");		sql.append("when DATE_FORMAT(from_date, '%Y-%m-%d') > CURRENT_DATE() then 3 ");		sql.append("when DATE_FORMAT(to_date, '%Y-%m-%d') < CURRENT_DATE() then 2 end as status ");		sql.append("from medical_healthcare_regimens mhr left join (select doctor_id as doctorId, fullname as doctorName, academic_rank_id, degree_id from doctors where is_active = 1 and is_delete = 0) d ");		sql.append("on d.doctorId = mhr.doctor_id ");		sql.append(" LEFT JOIN (SELECT Id, code FROM cats_academic_rank WHERE is_active=1 AND is_delete=0) car ON car.Id = d.academic_rank_id ");		sql.append(" LEFT JOIN (SELECT degree_id, code FROM cats_degree WHERE is_active=1 AND is_delete=0) cd ON cd.degree_id = d.degree_id ");		sql.append(" where is_active = 1 and is_delete = 0 ");		HashMap<String, Object> hmapParams = new HashMap<>();		if (dto != null && dto.getStatus() != null) {			sql.append("and case when DATE_FORMAT(from_date, '%Y-%m-%d') <= CURRENT_DATE() ");			sql.append("and CURRENT_DATE() <= DATE_FORMAT(to_date , '%Y-%m-%d') then 1 ");			sql.append("when DATE_FORMAT(from_date, '%Y-%m-%d') > CURRENT_DATE() then 3 ");			sql.append("when DATE_FORMAT(to_date, '%Y-%m-%d') < CURRENT_DATE() then 2 ");			sql.append("end = :status ");			hmapParams.put("status", dto.getStatus());		}		if (dto != null && dto.getQueryString() != null) {			sql.append("and mhr.name like CONCAT('%', :queryString, '%') ");			hmapParams.put("queryString", dto.getQueryString());		}		/* Permission */		if (userEntity.isPatient()) {			sql.append("and (mhr.patient_id in (select patient_id from patients_relationships where patient_parent_id = :patient_parent_id) " +					"or mhr.patient_id=:patient_parent_id) ");			hmapParams.put("patient_parent_id", userEntity.getTelecareUserId());		} else if (userEntity.isDoctor()) {			sql.append("and mhr.doctor_id = ").append(userEntity.getTelecareUserId() + " ");		} else if (userEntity.isClinic()) {			String healthfacilitiesCodes = sysUsersRepositoryJPA.getHealthfacilitiesCodes(userEntity.getKeycloakUserId());			if (healthfacilitiesCodes != null) {				sql.append("and b.healthfacilities_code in (").append(healthfacilitiesCodes).append(") ");			} else {				sql.append("and 1=2 ");			}		}		/* End permission */		Integer start = Constants.START_RECORD_DEFAULT;		if (dto != null && dto.getStartrecord() != null) {			start = dto.getStartrecord();		}		Integer pageSize = Constants.PAGE_SIZE_DEFAULT;		if (dto != null && dto.getPagesize() != null) {			pageSize = dto.getPagesize();		}		ResultSelectEntity resultData = getListDataAndCount(sql, hmapParams, start, pageSize, MedicalHealthcareRegimenDTO.class);		return resultData;	}	@Override	public MedicalHealthcareRegimenDTO getDetailHealthcareRegimens(MedicalHealthcareRegimenDTO itemParamsEntity) {		StringBuilder sql = new StringBuilder();		sql.append("select p.*, mhr.patient_regimen_id as patientRegimenId, d.doctorId, d.doctorName, car.code as academicRankCode, cd.code as degreeCode, mhr.name, rg.*, mhr.description, total_time as totalTime, mhr.from_date as fromDate, mhr.to_date as toDate, ");		sql.append("case when DATE_FORMAT(from_date, '%Y-%m-%d') <= CURRENT_DATE() and CURRENT_DATE() <= DATE_FORMAT(to_date , '%Y-%m-%d') then 1 ");		sql.append("when DATE_FORMAT(from_date, '%Y-%m-%d') > CURRENT_DATE() then 3 ");		sql.append("when DATE_FORMAT(to_date, '%Y-%m-%d') < CURRENT_DATE() then 2 end as status, ");		sql.append("mhr.is_active as isActiveBoolean ");		sql.append("from medical_healthcare_regimens mhr ");		sql.append("left join (select patient_id as patientId, fullname as patientName, birthday as patientBirthday, gender_id as patientGenderId, phone_number as patientPhoneNumber from patients where is_active = 1 and is_delete = 0) p on p.patientId = mhr.patient_id ");		sql.append("left join (select doctor_id as doctorId, fullname as doctorName,  academic_rank_id, degree_id  from doctors where is_active = 1 and is_delete = 0) d on d.doctorId = mhr.doctor_id ");		sql.append("left join (select group_id as groupId, name as groupName from regimens_groups where is_active = 1 and is_delete = 0) rg on rg.groupId = mhr.group_id ");		sql.append(" LEFT JOIN (SELECT Id, code FROM cats_academic_rank WHERE is_active=1 AND is_delete=0) car ON car.Id = d.academic_rank_id ");		sql.append(" LEFT JOIN (SELECT degree_id, code FROM cats_degree WHERE is_active=1 AND is_delete=0) cd ON cd.degree_id = d.degree_id ");		sql.append("where is_delete = 0 and mhr.patient_id = :patientId and mhr.patient_regimen_id = :patientRegimenId");		HashMap<String, Object> hmapParams = new HashMap<>();		hmapParams.put("patientId", itemParamsEntity.getPatientId());		hmapParams.put("patientRegimenId", itemParamsEntity.getPatientRegimenId());		return (MedicalHealthcareRegimenDTO) getFirstData(sql, hmapParams, MedicalHealthcareRegimenDTO.class);	}	@Override	public MedicalHealthcareRegimenDTO getDetailHealthcareRegimensAfterUpdate(MedicalHealthcareRegimenDTO itemParamsEntity) {		StringBuilder sql = new StringBuilder();		sql.append("select mhr.regimen_id as regimenId, mhr.name, mhr.description, total_time as totalTime, rg.*, is_active as isActiveBoolean ");		sql.append("from medical_healthcare_regimens mhr ");		sql.append("left join (select group_id as groupId, name as groupName from regimens_groups) rg on rg.groupId = mhr.group_id ");		sql.append("where is_delete = 0 and mhr.patient_regimen_id = :patientRegimenId");		HashMap<String, Object> hmapParams = new HashMap<>();		hmapParams.put("patientRegimenId", itemParamsEntity.getPatientRegimenId());		return (MedicalHealthcareRegimenDTO) getFirstData(sql, hmapParams, MedicalHealthcareRegimenDTO.class);	}}