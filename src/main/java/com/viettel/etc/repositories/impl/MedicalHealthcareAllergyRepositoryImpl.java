package com.viettel.etc.repositories.impl;import com.viettel.etc.dto.MedicalHealthcareAllergyDTO;import com.viettel.etc.repositories.MedicalHealthcareAllergyRepository;import com.viettel.etc.utils.Constants;import com.viettel.etc.xlibrary.core.entities.ResultSelectEntity;import com.viettel.etc.xlibrary.core.repositories.CommonDataBaseRepository;import org.springframework.stereotype.Repository;import java.util.HashMap;import java.util.List;/** * Autogen class Repository Impl: * * @author ToolGen * @date Tue Sep 22 10:56:18 ICT 2020 */@Repositorypublic class MedicalHealthcareAllergyRepositoryImpl extends CommonDataBaseRepository implements MedicalHealthcareAllergyRepository {    /**     * api get medical healthcare allergy     *     * @param itemParamsEntity: params client truyen len     * @return     */    @Override    public List<MedicalHealthcareAllergyDTO> getMedicalHealthcareAllergy(MedicalHealthcareAllergyDTO itemParamsEntity) {        StringBuilder sql = new StringBuilder();        HashMap<String, Object> hmapParams = new HashMap<>();        sql.append("SELECT mha.allergy_id AS allergyId, mha.his_id AS hisId, mha.allergy_group_id AS allergyGroupId, mha.relationship_id AS relationshipId, cr.name AS relationshipName, mha.allergy_name AS allergyName, mha.allergy_expression AS allergyExpression, mha.react_type_id AS reactTypeId, mha.allergy_level AS allergyLevel, CAST(mha.is_sync AS int) AS isSync ");        sql.append(" FROM medical_healthcare_allergy mha");        sql.append(" LEFT JOIN cats_relationships cr");        sql.append(" ON mha.relationship_id = cr.relationship_Id");        sql.append(" WHERE mha.is_active = 1 AND mha.is_delete = 0");        if (itemParamsEntity != null && itemParamsEntity.getPatientId() != null) {            sql.append(" AND (mha.patient_id = :patientId");            hmapParams.put("patientId", itemParamsEntity.getPatientId());        }        if (itemParamsEntity != null && itemParamsEntity.getPhoneNumber() != null) {            sql.append(" OR mha.phone_number LIKE CONCAT('%', :phoneNumber, '%')");            hmapParams.put("phoneNumber", itemParamsEntity.getPhoneNumber());        }        sql.append(")");        Integer start = Constants.START_RECORD_DEFAULT;        if (itemParamsEntity != null && itemParamsEntity.getStartrecord() != null) {            start = itemParamsEntity.getStartrecord();        }        Integer pageSize = Constants.PAGE_SIZE_DEFAULT;        if (itemParamsEntity != null && itemParamsEntity.getPagesize() != null) {            pageSize = itemParamsEntity.getPagesize();        }        List<MedicalHealthcareAllergyDTO> listData = (List<MedicalHealthcareAllergyDTO>) getListData(sql, hmapParams, start, pageSize, MedicalHealthcareAllergyDTO.class);        return listData;    }}