package com.viettel.etc.services.impl;import com.viettel.etc.dto.MedicalHealthcareNoteDTO;import com.viettel.etc.repositories.MedicalHealthcareNoteRepository;import com.viettel.etc.repositories.tables.BookingInformationsRepositoryJPA;import com.viettel.etc.repositories.tables.MedicalHealthcareNotesRepositoryJPA;import com.viettel.etc.repositories.tables.entities.MedicalHealthcareNotesEntity;import com.viettel.etc.services.MedicalHealthcareNoteService;import com.viettel.etc.services.tables.PatientsServiceJPA;import com.viettel.etc.utils.*;import com.viettel.etc.xlibrary.core.entities.ResultSelectEntity;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.security.core.Authentication;import org.springframework.stereotype.Service;import java.util.Objects;/** * Autogen class: * * @author ToolGen * @date Thu Aug 27 16:04:51 ICT 2020 */@Servicepublic class MedicalHealthcareNoteServiceImpl implements MedicalHealthcareNoteService {	@Autowired	MedicalHealthcareNotesRepositoryJPA medicalHealthcareNotesRepositoryJPA;	@Autowired	private MedicalHealthcareNoteRepository medicalHealthcareNoteRepository;	@Autowired	private PatientsServiceJPA patientsServiceJPA;	@Autowired	private BookingInformationsRepositoryJPA bookingInformationRepositoryJPA;	/**	 * api lay danh sach cach ghi chu	 *	 *	 * @param itemParamsEntity params client	 * @return	 */	@Override	public Object getMedicalHealthcareNote(MedicalHealthcareNoteDTO itemParamsEntity, Authentication authentication) throws TeleCareException {		TelecareUserEntity telecareUserEntity = FnCommon.getTelecareUserInfo(authentication);		Integer currentUserId = telecareUserEntity.getTelecareUserId().intValue();		Integer patientId = itemParamsEntity.getPatientId();		if (telecareUserEntity.isDoctor() && !bookingInformationRepositoryJPA.existsByDoctorIdAndPatientIdAndIsActiveAndIsDelete(				currentUserId, patientId, 1, 0)) {			FnCommon.throwsErrorApp(ErrorApp.ERR_DOCTOR_HAVE_NO_PATIENT);		}		else if (telecareUserEntity.isPatient()) {			Boolean hasRelationship = patientsServiceJPA.checkRelationship(itemParamsEntity.getPatientId(), currentUserId);			if (!hasRelationship) {				FnCommon.throwsErrorApp(ErrorApp.ERR_PATIENT_RELATIONSHIP_NOT_EXIST);			}		}		ResultSelectEntity dataResult = medicalHealthcareNoteRepository.getMedicalHealthcareNote(itemParamsEntity);		return dataResult;	}	/**	 * @param itemParamsEntity	 * @param authentication	 * @return	 * @throws TeleCareException	 */	@Override	public Object getMedicalHealthcareNoteDetail(MedicalHealthcareNoteDTO itemParamsEntity, Authentication authentication) throws TeleCareException {		Integer currentPatientId = patientsServiceJPA.getUserIdFromToken(authentication);		Boolean hasRelationship = patientsServiceJPA.checkRelationship(itemParamsEntity.getPatientId(), currentPatientId);		if (!hasRelationship) {			FnCommon.throwsErrorApp(ErrorApp.ERR_PATIENT_RELATIONSHIP_NOT_EXIST);		}		return medicalHealthcareNoteRepository.getMedicalHealthcareNoteDetail(itemParamsEntity);	}	/**	 * @param itemParamsEntity	 * @param authentication	 * @return	 * @throws TeleCareException	 */	@Override	public Object createMedicalHealthcareNote(MedicalHealthcareNoteDTO itemParamsEntity, Authentication authentication) throws TeleCareException {		Integer currentPatientId = patientsServiceJPA.getUserIdFromToken(authentication);		TelecareUserEntity telecareUserEntity = FnCommon.getTelecareUserInfo(authentication);		Boolean hasRelationship = patientsServiceJPA.checkRelationship(itemParamsEntity.getPatientId(), currentPatientId);		if (!hasRelationship && !telecareUserEntity.isDoctor()) {			FnCommon.throwsErrorApp(ErrorApp.ERR_PATIENT_RELATIONSHIP_NOT_EXIST);		}		MedicalHealthcareNotesEntity entity = new MedicalHealthcareNotesEntity();		FnCommon.copyProperties(itemParamsEntity, entity);		medicalHealthcareNotesRepositoryJPA.save(entity);		return FnCommon.convertObjectToObject(entity, MedicalHealthcareNoteDTO.class);	}	/**	 * @param dto	 * @param authentication	 * @return	 * @throws TeleCareException	 */	@Override	public Object updateMedicalHealthcareNote(MedicalHealthcareNoteDTO dto, Authentication authentication) throws TeleCareException {		Integer currentPatientId = patientsServiceJPA.getUserIdFromToken(authentication);		TelecareUserEntity telecareUserEntity = FnCommon.getTelecareUserInfo(authentication);		Boolean hasRelationship = patientsServiceJPA.checkRelationship(dto.getPatientId(), currentPatientId);		if (!hasRelationship && !telecareUserEntity.isDoctor()) {			FnCommon.throwsErrorApp(ErrorApp.ERR_PATIENT_RELATIONSHIP_NOT_EXIST);		}		MedicalHealthcareNotesEntity entity = medicalHealthcareNotesRepositoryJPA.findByNoteIdAndPatientId(dto.getNoteId(), dto.getPatientId());		if(Objects.isNull(entity)) {			FnCommon.throwsErrorApp(ErrorApp.ERROR_DATE_NULL);		}		FnCommon.copyProperties(dto, entity);		medicalHealthcareNotesRepositoryJPA.save(entity);		return FnCommon.convertObjectToObject(entity, MedicalHealthcareNoteDTO.class);	}	/**	 * @param dto	 * @param authentication	 * @return	 * @throws TeleCareException	 */	@Override	public Object deleteMedicalHealthcareNote(MedicalHealthcareNoteDTO dto, Authentication authentication) throws TeleCareException {		Integer currentPatientId = patientsServiceJPA.getUserIdFromToken(authentication);		TelecareUserEntity telecareUserEntity = FnCommon.getTelecareUserInfo(authentication);		Boolean hasRelationship = patientsServiceJPA.checkRelationship(dto.getPatientId(), currentPatientId);		if (!hasRelationship && !telecareUserEntity.isDoctor()) {			FnCommon.throwsErrorApp(ErrorApp.ERR_PATIENT_RELATIONSHIP_NOT_EXIST);		}		MedicalHealthcareNotesEntity entity = medicalHealthcareNotesRepositoryJPA.findByNoteIdAndPatientId(dto.getNoteId(), dto.getPatientId());		if(Objects.isNull(entity)) {			FnCommon.throwsErrorApp(ErrorApp.ERROR_DATE_NULL);		}		entity.setIsDelete(Constants.IS_DELETE);		medicalHealthcareNotesRepositoryJPA.save(entity);		return true;	}}