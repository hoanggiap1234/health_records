package com.viettel.etc.services.tables;import com.viettel.etc.dto.BookingInformationsDTO;import com.viettel.etc.dto.MedicalHealthcarePatientSummaryDTO;import com.viettel.etc.kafka.domain.ConsultantResultDTO;import com.viettel.etc.kafka.domain.healthcare_result.*;import com.viettel.etc.kafka.service.KafkaService;import com.viettel.etc.repositories.BookingInformationsRepository;import com.viettel.etc.repositories.tables.*;import com.viettel.etc.repositories.tables.entities.*;import com.viettel.etc.utils.Constants;import com.viettel.etc.utils.FnCommon;import com.viettel.etc.utils.JsonParser;import com.viettel.etc.utils.TeleCareException;import org.apache.commons.beanutils.BeanUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Propagation;import org.springframework.transaction.annotation.Transactional;import java.lang.reflect.Field;import java.time.ZoneId;import java.util.*;import java.util.stream.Collectors;/** * Autogen class: Create Service For Table Name Medical_healthcare_histories * * @author ToolGen * @date Fri Nov 06 13:56:14 ICT 2020 */@Servicepublic class MedicalHealthcareHistoriesServiceJPA {	@Autowired	MedicalHealthcareHistoriesRepositoryJPA medicalHealthcareHistories;	@Autowired	BookingInformationsRepository bookingInformationsRepository;	@Autowired	MedicalHealthcareDrugsRepositoryJPA medicalHealthcareDrugsRepositoryJPA;	@Autowired	MedicalHealthcareHistoriesAttachmentsRepositoryJPA medicalHealthcareHistoriesAttachmentsRepositoryJPA;	@Autowired	MedicalHealthcareServicesRepositoryJPA healthcareServicesRepositoryJPA;	@Autowired	MedicalHealthcareHistoriesIcdRepositoryJPA historiesIcdRepositoryJPA;	@Autowired	MedicalHealthcarePatientDetailRepositoryJPA medicalHealthcarePatientDetailRepositoryJPA;	@Autowired	CatsHealthfacilitiesRepositoryJPA healthfacilitiesRepositoryJPA;	@Autowired	MedicalHealthcareServicesResultsRepositoryJPA healthcareServicesResultsRepositoryJPA;	@Autowired	KafkaService kafkaService;	@Autowired	MedicalHealthcarePatientSummaryRepositoryJPA medicalHealthcarePatientSummaryRepositoryJPA;	/**	 * @param bookingId	 * @param dto	 */	@Transactional(rollbackFor = Exception.class)	public void saveHealthcareHistories(int bookingId, ConsultantResultDTO dto) throws Exception {		BookingInformationsDTO booking = bookingInformationsRepository.getById(bookingId);		MedicalHealthcareHistoriesEntity historiesEntity = new MedicalHealthcareHistoriesEntity();		if (booking.getHistoriesId() != null) {			MedicalHealthcareHistoriesEntity historiesDB = medicalHealthcareHistories.findById(booking.getHistoriesId()).orElse(null);			if (historiesDB != null) {				historiesEntity = historiesDB;			} else {				historiesEntity.setCreateUserId(dto.getActionBy());			}			historiesEntity.setUpdateUserId(dto.getActionBy());		}		FnCommon.copyProperties(dto, historiesEntity);		historiesEntity.setPatientId(booking.getPatientId());		historiesEntity.setExaminationDate(dto.getExaminationDate());		historiesEntity.setFinishExaminationDate(dto.getFinishExaminationDate());		historiesEntity.setDoctorName(booking.getAppointmentDoctorName());		historiesEntity.setDoctorId(booking.getAppointmentDoctorId());		historiesEntity.setHealthfacilitiesCode(booking.getHealthfacilitiesCode());		historiesEntity.setHealthfacilitiesName(booking.getHealthfacilitiesName());		historiesEntity.setReasonsMedicalexamination(dto.getReasonsMedicalexamination());		historiesEntity.setConcludesDisease(dto.getConcludesDisease());		historiesEntity.setTreatmentDirection(dto.getTreatmentDirection());		if (dto.getReExaminationDate() != null) {			historiesEntity.setReExaminationDate(FnCommon.toLocalDateTime(dto.getReExaminationDate()));		}		historiesEntity.setTypeOfExamination(dto.getTypeOfExamination());		historiesEntity.setDigitalSignatures(UUID.randomUUID().toString());		medicalHealthcareHistories.save(historiesEntity);		saveMedicalDrugHealthcareHistories(historiesEntity, dto);		saveAttachmentHealthcareHistories(historiesEntity, dto);		saveHealcareServiceHealthcareHistories(historiesEntity, dto);		saveHistoriesIcdHealthcareHistories(dto.getActionBy(), historiesEntity.getHistoriesId(), bookingId, dto);		saveHealthcareDetailHealthcareHistories(historiesEntity, dto);		kafkaService.healthRecordCallbackBooking(booking.getBookingId(), historiesEntity.getHistoriesId(), dto.getActionBy());	}	@Transactional(rollbackFor = Exception.class)	public void saveHealthcareInsuranceResult(HealthcareInsuranceResultEntity dto)			throws Exception {		GeneralInformation generalInfor = dto.getGeneralInformation();		BookingInformationsDTO booking = bookingInformationsRepository.getById(generalInfor.getBookingId());		MedicalHealthcareHistoriesEntity historiesEntity = new MedicalHealthcareHistoriesEntity();		if (booking.getHistoriesId() != null) {			MedicalHealthcareHistoriesEntity historiesDB = medicalHealthcareHistories.findById(booking.getHistoriesId()).orElse(null);			if (historiesDB != null) {				historiesEntity = historiesDB;			} else {				historiesEntity.setCreateUserId(dto.getActionBy());			}			historiesEntity.setUpdateUserId(dto.getActionBy());		}		FnCommon.copyProperties(generalInfor, historiesEntity);		historiesEntity.setPatientId(booking.getPatientId());		if (generalInfor.getReExaminationDate() != null) {			historiesEntity.setReExaminationDate(generalInfor.getReExaminationDate().toInstant()					.atZone(ZoneId.systemDefault())					.toLocalDateTime());		}		CatsHealthfacilitiesEntity healthfaciliti = healthfacilitiesRepositoryJPA				.findByHealthfacilitiesCodeAndIsDelete(generalInfor.getHealthfacilitiesCode(), Constants.IS_NOT_DELETE);		if (healthfaciliti == null) {			throw new TeleCareException("hefaciliti not found");		}		historiesEntity.setHealthfacilitiesCode(healthfaciliti.getHealthfacilitiesCode());		historiesEntity.setHealthfacilitiesName(healthfaciliti.getName());		historiesEntity.setCreateUserId(dto.getActionBy());		historiesEntity.setDigitalSignatures(UUID.randomUUID().toString());		MedicalHealthcareHistoriesEntity result = medicalHealthcareHistories.save(historiesEntity);		/* insert to table medical_healthcare_patient_detail */		saveHealthcareDetail(result, dto);		/* insert to table medical_healthcare_drugs*/		saveHealthcareDrugs(result, dto);		/*insert to table medical_healthcare_histories_icd*/		saveHistoriesIcd(dto.getActionBy(), result.getHistoriesId(), booking.getBookingId(), dto);		/*insert to table medical_healthcare_services*/		saveHealcareService(result, dto);		kafkaService.healthRecordCallbackBooking(booking.getBookingId(), historiesEntity.getHistoriesId(), dto.getActionBy());	}	@Transactional(rollbackFor = Exception.class)	public void saveHealthcareInsuranceResultBhxh(HealthcareInsuranceResultEntity dto)			throws Exception {		GeneralInformation generalInfor = dto.getGeneralInformation();		MedicalHealthcareHistoriesEntity historiesEntity = new MedicalHealthcareHistoriesEntity();		FnCommon.copyProperties(generalInfor, historiesEntity);		historiesEntity.setPatientId(generalInfor.getPatientId());		if (generalInfor.getReExaminationDate() != null) {			historiesEntity.setReExaminationDate(generalInfor.getReExaminationDate().toInstant()					.atZone(ZoneId.systemDefault())					.toLocalDateTime());		}		CatsHealthfacilitiesEntity healthfaciliti = healthfacilitiesRepositoryJPA				.findByHealthfacilitiesCodeAndIsDelete(generalInfor.getHealthfacilitiesCode(), Constants.IS_NOT_DELETE);		if (healthfaciliti == null) {			throw new TeleCareException("hefaciliti not found");		}		historiesEntity.setHealthfacilitiesCode(healthfaciliti.getHealthfacilitiesCode());		historiesEntity.setHealthfacilitiesName(healthfaciliti.getName());		historiesEntity.setCreateUserId(dto.getActionBy());		historiesEntity.setDigitalSignatures(UUID.randomUUID().toString());		MedicalHealthcareHistoriesEntity result = medicalHealthcareHistories.save(historiesEntity);		/* insert to table medical_healthcare_patient_detail */		saveHealthcareDetail(result, dto);		/* insert to table medical_healthcare_drugs*/		saveHealthcareDrugs(result, dto);		/*insert to table medical_healthcare_histories_icd*/		saveHistoriesIcd(dto.getActionBy(), result.getHistoriesId(), -1, dto);		/*insert to table medical_healthcare_services*/		saveHealcareService(result, dto);	}	/**	 * Save medical drug	 *	 * @param historiesEntity	 * @param dto	 */	@Transactional(propagation = Propagation.MANDATORY)	void saveMedicalDrugHealthcareHistories(MedicalHealthcareHistoriesEntity historiesEntity,											ConsultantResultDTO dto) {		if (dto.getDrugs() == null || dto.getDrugs().size() == 0) {			return;		}		List<MedicalHealthcareDrugsEntity> drugsEntitiesOld = new ArrayList<>();		if (historiesEntity.getHistoriesId() != null) {			drugsEntitiesOld = medicalHealthcareDrugsRepositoryJPA					.findByHistoriesId(historiesEntity.getHistoriesId());		}		Map<Integer, MedicalHealthcareDrugsEntity> mapDrugCode = new HashMap<>();		for (MedicalHealthcareDrugsEntity drugsEntity : drugsEntitiesOld) {			mapDrugCode.put(drugsEntity.getDrugId(), drugsEntity);		}		List<MedicalHealthcareDrugsEntity> drugsEntities = new ArrayList<>();		for (ConsultantResultDTO.Drug drug : dto.getDrugs()) {			MedicalHealthcareDrugsEntity drugsEntity = new MedicalHealthcareDrugsEntity();			if (mapDrugCode.containsKey(drug.getDrugId())) {				drugsEntity = mapDrugCode.get(drug.getDrugId());			}			FnCommon.copyProperties(drug, drugsEntity);			drugsEntity.setHistoriesId(historiesEntity.getHistoriesId());			drugsEntity.setPatientId(historiesEntity.getPatientId());			drugsEntity.setHealthfacilitiesCode(historiesEntity.getHealthfacilitiesCode());			drugsEntity.setDecisionDate(FnCommon.toLocalDateTime(dto.getExaminationDate()));			drugsEntity.setCreateUserId(historiesEntity.getCreateUserId());			drugsEntities.add(drugsEntity);		}		if (drugsEntities.size() > 0) {			medicalHealthcareDrugsRepositoryJPA.saveAll(drugsEntities);		}	}	/**	 * save attachment	 *	 * @param historiesEntity	 * @param dto	 * @throws TeleCareException	 */	@Transactional(propagation = Propagation.MANDATORY)	void saveAttachmentHealthcareHistories(MedicalHealthcareHistoriesEntity historiesEntity, ConsultantResultDTO dto) {		List<MedicalHealthcareHistoriesAttachmentsEntity> attachmentsEntities = new ArrayList<>();		for (ConsultantResultDTO.Attacments attachment : dto.getAttachments()) {			MedicalHealthcareHistoriesAttachmentsEntity attachmentsEntity = new MedicalHealthcareHistoriesAttachmentsEntity();			attachmentsEntity.setCreateUserId(historiesEntity.getCreateUserId());			attachmentsEntity.setHistoriesId(historiesEntity.getHistoriesId());			attachmentsEntity.setGroupType(3);			attachmentsEntity.setFileName(attachment.getFileName());			attachmentsEntity.setUrl(attachment.getUrl());			attachmentsEntities.add(attachmentsEntity);		}		if (attachmentsEntities.size() > 0) {			medicalHealthcareHistoriesAttachmentsRepositoryJPA.saveAll(attachmentsEntities);		}	}	/**	 * insert to table medical_healthcare_services and medical_healthcare_services_result	 */	@Transactional(propagation = Propagation.MANDATORY)	void saveHealcareServiceHealthcareHistories(MedicalHealthcareHistoriesEntity histories, ConsultantResultDTO dto) {		if (dto.getSubclinical() == null || dto.getSubclinical().size() == 0) {			return;		}		List<MedicalHealthcareServicesEntity> entitiesOld = new ArrayList<>();		if (histories.getHistoriesId() != null) {			entitiesOld = healthcareServicesRepositoryJPA					.findByHistoriesId(histories.getHistoriesId());		}		Map<Integer, MedicalHealthcareServicesEntity> mapEntityCode = new HashMap<>();		for (MedicalHealthcareServicesEntity entity : entitiesOld) {			mapEntityCode.put(entity.getServiceId(), entity);		}//		List<MedicalHealthcareServicesEntity> entities = new ArrayList<>();		for (ConsultantResultDTO.Subclinical serviceInformation : dto.getSubclinical()) {			MedicalHealthcareServicesEntity servicesEntity = new MedicalHealthcareServicesEntity();			if (mapEntityCode.containsKey(serviceInformation.getServiceId())) {				servicesEntity = mapEntityCode.get(serviceInformation.getServiceId());			}			FnCommon.copyProperties(serviceInformation, servicesEntity);			servicesEntity.setHistoriesId(histories.getHistoriesId());			servicesEntity.setPatientId(histories.getPatientId());			servicesEntity.setCreateUserId(histories.getCreateUserId());			servicesEntity.setGroupId(serviceInformation.getGroupId());			servicesEntity.setQuantity(1);			List<MedicalHealthcareHistoriesAttachmentsEntity> attachmentsEntities = new ArrayList<>();			for (ConsultantResultDTO.Attacments attachment : serviceInformation.getAttachments()) {				MedicalHealthcareHistoriesAttachmentsEntity attachmentsEntity = new MedicalHealthcareHistoriesAttachmentsEntity();				attachmentsEntity.setFileName(attachment.getFileName());				attachmentsEntity.setUrl(attachment.getUrl());				attachmentsEntity.setHistoriesId(histories.getHistoriesId());				attachmentsEntity.setCreateUserId(histories.getCreateUserId());				attachmentsEntity.setSercive(servicesEntity);				attachmentsEntity.setGroupType(3);				attachmentsEntities.add(attachmentsEntity);			}			List<MedicalHealthcareServicesResultsEntity> resultsEntities = new ArrayList<>();			for (ConsultantResultDTO.ServiceIndex index : serviceInformation.getIndexs()) {				MedicalHealthcareServicesResultsEntity resultsEntity = new MedicalHealthcareServicesResultsEntity();				FnCommon.copyProperties(index, resultsEntity);				resultsEntity.setCreateUserId(histories.getCreateUserId());				resultsEntity.setSercive(servicesEntity);				resultsEntity.setHistoriesId(histories.getHistoriesId());				resultsEntities.add(resultsEntity);			}			servicesEntity.setServiceAttachments(attachmentsEntities);			servicesEntity.setServiceResults(resultsEntities);			servicesEntity.inferproperti();			System.out.println(JsonParser.toJson(servicesEntity));			healthcareServicesRepositoryJPA.save(servicesEntity);		}	}	/**	 * insert to table medical_healthcare_histories_icd	 *	 * @param hisId	 * @param bookingId	 * @param dto	 */	@Transactional(propagation = Propagation.MANDATORY)	void saveHistoriesIcdHealthcareHistories(int createdUser, int hisId, int bookingId, ConsultantResultDTO dto) {		if (dto.getDiagnostic() == null || dto.getDiagnostic().getDiseases() == null || dto.getDiagnostic().getDiseases().isEmpty()) {			return;		}		List<MedicalHealthcareHistoriesIcdEntity> entitiesOld = historiesIcdRepositoryJPA.findByHistoriesId(hisId);		Map<String, MedicalHealthcareHistoriesIcdEntity> mapEntityCode = new HashMap<>();		for (MedicalHealthcareHistoriesIcdEntity entity : entitiesOld) {			mapEntityCode.put(entity.getDiseasesCode(), entity);		}		List<MedicalHealthcareHistoriesIcdEntity> entities = new ArrayList<>();		for (ConsultantResultDTO.Diseases diseaseInformation : dto.getDiagnostic().getDiseases()) {			MedicalHealthcareHistoriesIcdEntity entity = new MedicalHealthcareHistoriesIcdEntity();			if (mapEntityCode.containsKey(diseaseInformation.getDiseasesCode())) {				entity = mapEntityCode.get(diseaseInformation.getDiseasesCode());			}			FnCommon.copyProperties(diseaseInformation, entity);			entity.setHistoriesId(hisId);			entity.setPatientId(bookingId);			entity.setCreateUserId(createdUser);			entity.setIsMain(0);			entities.add(entity);		}		if (entities.size() > 0) {			historiesIcdRepositoryJPA.saveAll(entities);		}	}	/**	 * insert to table medical_healthcare_patient_detail	 *	 * @param historiesEntity	 * @param dto	 */	@Transactional(propagation = Propagation.MANDATORY)	void saveHealthcareDetailHealthcareHistories(MedicalHealthcareHistoriesEntity historiesEntity, ConsultantResultDTO dto) throws Exception {		if (dto.getLivingFunction() == null) {			return;		}		MedicalHealthcarePatientDetailEntity detailEntity = new MedicalHealthcarePatientDetailEntity();		if (historiesEntity.getHistoriesId() != null) {			MedicalHealthcarePatientDetailEntity detailDB = medicalHealthcarePatientDetailRepositoryJPA					.findByHistoriesId(historiesEntity.getHistoriesId());			if (detailDB != null) {				detailEntity = detailDB;			}		}		FnCommon.copyProperties(dto.getLivingFunction(), detailEntity);		detailEntity.setHistoriesId(historiesEntity.getHistoriesId());		detailEntity.setPatientId(historiesEntity.getPatientId());		detailEntity.setResultDate(new Date());		detailEntity.setCreateUserId(historiesEntity.getCreateUserId());		detailEntity.setBmi(dto.getLivingFunction().getBmi());		medicalHealthcarePatientDetailRepositoryJPA.save(detailEntity);		MedicalHealthcarePatientSummaryDTO detailDTO = new MedicalHealthcarePatientSummaryDTO();		detailDTO.setBmi(dto.getLivingFunction().getBmi());		FnCommon.copyProperties(detailEntity, detailDTO);		detailDTO.setBloodPressure(detailDTO.getBloodPressureMin() != null && detailDTO.getBloodPressureMax() != null ? detailDTO.getBloodPressureMin() + "/" + detailDTO.getBloodPressureMax() : "");		if (dto.getDiagnostic() != null && dto.getDiagnostic().getDiseases() != null) {			detailDTO.setDiseases(dto.getDiagnostic().getDiseases().stream().map(d -> d.getDiseasesCode() + "-" + d.getDiseasesName()).collect(Collectors.joining(",")));		}		createPatientSummary(detailDTO);	}	/**	 * insert to table medical_healthcare_patient_detail	 *	 * @param historiesEntity	 * @param dto	 */	@Transactional(propagation = Propagation.MANDATORY)	void saveHealthcareDetail(MedicalHealthcareHistoriesEntity historiesEntity, HealthcareInsuranceResultEntity dto) throws Exception {		MedicalHealthcarePatientDetailEntity detailEntity = new MedicalHealthcarePatientDetailEntity();		if (historiesEntity.getHistoriesId() != null) {			MedicalHealthcarePatientDetailEntity detailDB = medicalHealthcarePatientDetailRepositoryJPA					.findByHistoriesId(historiesEntity.getHistoriesId());			if (detailDB != null) {				detailEntity = detailDB;			}		}		FnCommon.copyProperties(dto.getGeneralInformation(), detailEntity);		detailEntity.setHistoriesId(historiesEntity.getHistoriesId());		detailEntity.setWeight(dto.getGeneralInformation().getWeight() != null ? dto.getGeneralInformation().getWeight() : detailEntity.getWeight());		detailEntity.setPatientId(historiesEntity.getPatientId());		detailEntity.setResultDate(new Date());		detailEntity.setCreateUserId(historiesEntity.getCreateUserId());		medicalHealthcarePatientDetailRepositoryJPA.save(detailEntity);		MedicalHealthcarePatientSummaryDTO detailDTO = new MedicalHealthcarePatientSummaryDTO();		FnCommon.copyProperties(detailEntity, detailDTO);		detailDTO.setBloodPressure(detailDTO.getBloodPressureMin() != null && detailDTO.getBloodPressureMax() != null ? detailDTO.getBloodPressureMin() + "/" + detailDTO.getBloodPressureMax() : "");		if (dto.getDiseaseInformations() != null) {			detailDTO.setDiseases(dto.getDiseaseInformations().stream().map(d -> d.getDiseasesCode() + "-" + d.getDiseasesName()).collect(Collectors.joining(",")));		}		createPatientSummary(detailDTO);	}	/**	 * insert to table medical_healthcare_histories_icd	 *	 * @param hisId	 * @param bookingId	 * @param dto	 */	@Transactional(propagation = Propagation.MANDATORY)	void saveHistoriesIcd(Integer createdUser, int hisId, int bookingId, HealthcareInsuranceResultEntity dto) {		List<MedicalHealthcareHistoriesIcdEntity> entitiesOld = historiesIcdRepositoryJPA.findByHistoriesId(hisId);		Map<String, MedicalHealthcareHistoriesIcdEntity> mapEntityCode = new HashMap<>();		for (MedicalHealthcareHistoriesIcdEntity entity : entitiesOld) {			mapEntityCode.put(entity.getDiseasesCode(), entity);		}		List<MedicalHealthcareHistoriesIcdEntity> entities = new ArrayList<>();		// TODO: valid ma benh		if (dto.getDiseaseInformations() != null && dto.getDiseaseInformations().size() > 0) {			for (DiseaseInformation diseaseInformation : dto.getDiseaseInformations()) {				MedicalHealthcareHistoriesIcdEntity entity = new MedicalHealthcareHistoriesIcdEntity();				if (mapEntityCode.containsKey(diseaseInformation.getDiseasesCode())) {					entity = mapEntityCode.get(diseaseInformation.getDiseasesCode());				}				FnCommon.copyProperties(diseaseInformation, entity);				entity.setHistoriesId(hisId);				entity.setPatientId(bookingId);				entity.setCreateUserId(createdUser);				entities.add(entity);			}		}		if (entities.size() > 0) {			historiesIcdRepositoryJPA.saveAll(entities);		}	}	/**	 * insert to table medical_healthcare_services and medical_healthcare_services_result	 */	@Transactional(propagation = Propagation.MANDATORY)	void saveHealcareService(MedicalHealthcareHistoriesEntity histories, HealthcareInsuranceResultEntity dto) {		if (dto.getServiceInformations().size() == 0) {			return;		}		List<MedicalHealthcareServicesEntity> entitiesOld = new ArrayList<>();		if (histories.getHistoriesId() != null) {			entitiesOld = healthcareServicesRepositoryJPA					.findByHistoriesId(histories.getHistoriesId());		}		Map<String, MedicalHealthcareServicesEntity> mapEntityCode = new HashMap<>();		for (MedicalHealthcareServicesEntity entity : entitiesOld) {			mapEntityCode.put(entity.getServiceCode(), entity);		}		List<MedicalHealthcareServicesEntity> entities = new ArrayList<>();		for (ServiceInformation serviceInformation : dto.getServiceInformations()) {			MedicalHealthcareServicesEntity entity = new MedicalHealthcareServicesEntity();			if (mapEntityCode.containsKey(serviceInformation.getServiceCode())) {				entity = mapEntityCode.get(serviceInformation.getServiceCode());			}			FnCommon.copyProperties(serviceInformation, entity);			entity.setHistoriesId(histories.getHistoriesId());			entity.setPatientId(histories.getPatientId());			entity.setCreateUserId(histories.getCreateUserId());			entity.setHealthfacilitiesCode(dto.getGeneralInformation().getHealthfacilitiesCode());			entities.add(entity);		}		healthcareServicesRepositoryJPA.saveAll(entities);		Map<String, MedicalHealthcareServicesEntity> mapCodeSerivce = new HashMap<>();		for (MedicalHealthcareServicesEntity entity : entities) {			mapCodeSerivce.put(entity.getServiceCode(), entity);		}		/* save result */		List<MedicalHealthcareServicesResultsEntity> resultEntitieOld = new ArrayList<>();		if (histories.getHistoriesId() != null) {			resultEntitieOld = healthcareServicesResultsRepositoryJPA					.findByHistoriesId(histories.getHistoriesId());		}		Map<String, MedicalHealthcareServicesResultsEntity> mapEntitieOldCode = new HashMap<>();		for (MedicalHealthcareServicesResultsEntity entity : resultEntitieOld) {			mapEntitieOldCode.put(entity.getServiceCode(), entity);		}		if (dto.getClinicalResults() != null && dto.getClinicalResults().size() > 0) {			List<MedicalHealthcareServicesResultsEntity> resultEntities = new ArrayList<>();			for (ClinicalResults resultInfo : dto.getClinicalResults()) {				MedicalHealthcareServicesResultsEntity entity = new MedicalHealthcareServicesResultsEntity();				if (mapEntityCode.containsKey(resultInfo.getServiceCode())) {					entity = mapEntitieOldCode.get(resultInfo.getServiceCode());				}				FnCommon.copyProperties(resultInfo, entity);				entity.setCreateUserId(histories.getCreateUserId());				entity.setSercive(mapCodeSerivce.get(resultInfo.getServiceCode()));				entity.setHistoriesId(histories.getHistoriesId());				resultEntities.add(entity);			}			healthcareServicesResultsRepositoryJPA.saveAll(resultEntities);		}	}	/**	 * insert to table medical_healthcare_drugs	 *	 * @param histories	 * @param dto	 */	@Transactional(propagation = Propagation.MANDATORY)	void saveHealthcareDrugs(MedicalHealthcareHistoriesEntity histories, HealthcareInsuranceResultEntity dto) {		if (dto.getDrugInformations() == null || dto.getDrugInformations().size() == 0) {			return;		}		List<MedicalHealthcareDrugsEntity> drugsEntitiesOld = new ArrayList<>();		if (histories.getHistoriesId() != null) {			drugsEntitiesOld = medicalHealthcareDrugsRepositoryJPA					.findByHistoriesId(histories.getHistoriesId());		}		Map<String, MedicalHealthcareDrugsEntity> mapDrugCode = new HashMap<>();		for (MedicalHealthcareDrugsEntity drugsEntity : drugsEntitiesOld) {			mapDrugCode.put(drugsEntity.getDrugCode(), drugsEntity);		}		List<MedicalHealthcareDrugsEntity> drugsEntities = new ArrayList<>();		for (DrugInformation drug : dto.getDrugInformations()) {			MedicalHealthcareDrugsEntity drugsEntity = new MedicalHealthcareDrugsEntity();			if (mapDrugCode.containsKey(drug.getDrugCode())) {				drugsEntity = mapDrugCode.get(drug.getDrugCode());			}			FnCommon.copyProperties(drug, drugsEntity);			drugsEntity.createDefaultProperti();			drugsEntity.setHistoriesId(histories.getHistoriesId());			drugsEntity.setPatientId(histories.getPatientId());			drugsEntity.setHealthfacilitiesCode(dto.getGeneralInformation().getHealthfacilitiesCode());			if (drug.getDecisionDate() != null) {				drugsEntity.setDecisionDate(drug.getDecisionDate().toInstant()						.atZone(ZoneId.systemDefault())						.toLocalDateTime());			}			drugsEntity.setCreateUserId(histories.getCreateUserId());			drugsEntities.add(drugsEntity);		}		if (drugsEntities.size() > 0) {			medicalHealthcareDrugsRepositoryJPA.saveAll(drugsEntities);		}	}	@Transactional(propagation = Propagation.MANDATORY)	public void createPatientSummary(MedicalHealthcarePatientSummaryDTO dto) throws Exception {		List<MedicalHealthcarePatientSummaryEntity> updates = new ArrayList<>();		List<MedicalHealthcarePatientSummaryEntity> entities = medicalHealthcarePatientSummaryRepositoryJPA.findByPatientId(dto.getPatientId());		Field[] dtoFields = dto.getClass().getDeclaredFields();		List<String> fieldUpdate = Arrays.asList("bloodSugar", "spo2Score", "bloodPressure", "heartBeat", "temperature", "height", "weight", "bmi", "bloodAbo", "bloodRh", "diseases");		for (Field dtoField : dtoFields) {			dtoField.setAccessible(true);			if (!fieldUpdate.contains(dtoField.getName()) || dtoField.get(dto) == null) {				continue;			}			MedicalHealthcarePatientSummaryEntity entityNew = new MedicalHealthcarePatientSummaryEntity();			for (MedicalHealthcarePatientSummaryEntity entity : entities) {				Field entityField = entity.getClass().getDeclaredField(dtoField.getName());				entityField.setAccessible(true);				if (entityField.get(entity) != null) {					entityNew = entity;					break;				}			}			BeanUtils.setProperty(entityNew, dtoField.getName(), dtoField.get(dto));			BeanUtils.setProperty(entityNew, "resultDate", dto.getResultDate());			BeanUtils.setProperty(entityNew, "patientId", dto.getPatientId());			updates.add(entityNew);		}		if (!updates.isEmpty()) {			medicalHealthcarePatientSummaryRepositoryJPA.saveAll(updates);		}	}}