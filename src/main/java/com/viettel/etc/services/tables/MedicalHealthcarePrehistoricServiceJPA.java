package com.viettel.etc.services.tables;import com.viettel.etc.dto.MedicalHealthcarePrehistoricDTO;import com.viettel.etc.repositories.tables.MedicalHealthcarePrehistoricRepositoryJPA;import com.viettel.etc.repositories.tables.entities.MedicalHealthcarePrehistoricEntity;import com.viettel.etc.utils.ErrorApp;import com.viettel.etc.utils.FnCommon;import com.viettel.etc.utils.TeleCareException;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.security.core.Authentication;import org.springframework.stereotype.Service;import java.util.List;import java.util.Optional;/** * Autogen class: Create Service For Table Name medicalHealthcarePrehistoricRepositoryJPA *  * @author ToolGen * @date Thu Sep 17 17:27:43 ICT 2020 */@Servicepublic class MedicalHealthcarePrehistoricServiceJPA {    @Autowired    MedicalHealthcarePrehistoricRepositoryJPA medicalHealthcarePrehistoricRepositoryJPA;    public List<MedicalHealthcarePrehistoricEntity>  findAll() {        return this.medicalHealthcarePrehistoricRepositoryJPA.findAll();    }    public MedicalHealthcarePrehistoricEntity save(MedicalHealthcarePrehistoricEntity medicalHealthcarePrehistoricRepositoryJPA) {        return this.medicalHealthcarePrehistoricRepositoryJPA.save(medicalHealthcarePrehistoricRepositoryJPA);    }    public Optional<MedicalHealthcarePrehistoricEntity> findById(Integer id) {        return this.medicalHealthcarePrehistoricRepositoryJPA.findById(id);    }//    public void deleteById(Integer id) {//        this.medicalHealthcarePrehistoricRepositoryJPA.deleteById(id);//    }////    public MedicalHealthcarePrehistoricEntity getOne(Integer id) {//        return this.medicalHealthcarePrehistoricRepositoryJPA.getOne(id);//    }////    public Boolean existsById(Integer id) {//        return this.medicalHealthcarePrehistoricRepositoryJPA.existsById(id);//    }    /**     * Thêm mới tiền sử     *     * @param utilityDTO     * @param authentication     * @return     * @throws TeleCareException     */    public MedicalHealthcarePrehistoricDTO createPatientPrehistoric(MedicalHealthcarePrehistoricDTO utilityDTO, Authentication authentication,                                                                    Integer patientId) throws TeleCareException {        MedicalHealthcarePrehistoricEntity entity = (MedicalHealthcarePrehistoricEntity) FnCommon.convertObjectToObject(utilityDTO, MedicalHealthcarePrehistoricEntity.class);        entity.setPatientId(patientId);        MedicalHealthcarePrehistoricEntity result = this.medicalHealthcarePrehistoricRepositoryJPA.save(entity);        return (MedicalHealthcarePrehistoricDTO) FnCommon.convertObjectToObject(result, MedicalHealthcarePrehistoricDTO.class);    }    /**     * Cập nhật tiền sử     *     * @param utilityDTO     * @param authentication     * @return     * @throws TeleCareException     */    public MedicalHealthcarePrehistoricDTO updatePatientPrehistoric(MedicalHealthcarePrehistoricDTO utilityDTO, Authentication authentication) throws TeleCareException {        MedicalHealthcarePrehistoricEntity entity = medicalHealthcarePrehistoricRepositoryJPA.findById(utilityDTO.getPrehistoricId()).orElse(null);        if (entity == null) {            FnCommon.throwsErrorApp(ErrorApp.ERROR_INPUTPARAMS);        }        FnCommon.copyProperties(utilityDTO, entity);        MedicalHealthcarePrehistoricEntity result = this.medicalHealthcarePrehistoricRepositoryJPA.save(entity);        return (MedicalHealthcarePrehistoricDTO) FnCommon.convertObjectToObject(result, MedicalHealthcarePrehistoricDTO.class);    }    /**     * Xoá tiền sử     *     * @param utilityDTO     * @param authentication     * @throws TeleCareException     */    public void deletePatientPrehistoric(MedicalHealthcarePrehistoricDTO utilityDTO, Authentication authentication) throws TeleCareException {        MedicalHealthcarePrehistoricEntity entity = medicalHealthcarePrehistoricRepositoryJPA.findById(utilityDTO.getPrehistoricId()).orElse(null);        if (entity == null) {            throw new TeleCareException(ErrorApp.ERROR_INPUTPARAMS);        }        FnCommon.copyProperties(utilityDTO, entity);        entity.setIsDelete(1);        this.medicalHealthcarePrehistoricRepositoryJPA.save(entity);    }    public MedicalHealthcarePrehistoricEntity findByPatientId(Integer patientId) {        return medicalHealthcarePrehistoricRepositoryJPA.findFirstByPatientIdOrderByCreateDateDesc(patientId);    }}