package com.viettel.etc.services.tables;import com.viettel.etc.repositories.tables.PatientsRelationshipsRepositoryJPA;import com.viettel.etc.repositories.tables.PatientsRepositoryJPA;import com.viettel.etc.repositories.tables.entities.PatientsRelationshipsEntity;import com.viettel.etc.utils.ErrorApp;import com.viettel.etc.utils.FnCommon;import com.viettel.etc.utils.TeleCareException;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.security.core.Authentication;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;/** * Autogen class: Create Service For Table Name Patients_relationships *  * @author ToolGen * @date Thu Aug 13 22:25:22 ICT 2020 */@Service@Transactionalpublic class PatientsRelationshipsServiceJPA {    @Autowired    PatientsRelationshipsRepositoryJPA patients_relationships;    @Autowired    PatientsServiceJPA patientsServiceJPA;    @Autowired    PatientsRepositoryJPA patientsRepositoryJPA;    public PatientsRelationshipsEntity save(PatientsRelationshipsEntity Patients_relationships) throws TeleCareException {        if (Patients_relationships == null)  throw new TeleCareException(ErrorApp.ERROR_INPUTPARAMS);        return this.patients_relationships.save(Patients_relationships);    }    public void deleteByPatientIdAndPatientParentId(Integer patientRelativeId, Integer patientId) {        this.patients_relationships.deleteByPatientIdAndPatientParentId(patientRelativeId, patientId);    }    public Boolean existsByPatientIdAndPatientParentId(Integer patientRelativeId, Integer patientId) {        return this.patients_relationships.existsByPatientIdAndPatientParentId(patientRelativeId, patientId);    }    public PatientsRelationshipsEntity findByPatientIdAndPatientParentId(Integer patientRelativeId, Integer patientId) {        return this.patients_relationships.findByPatientIdAndPatientParentId(patientRelativeId, patientId);    }    public void deletePatientRelative(Integer patientId, Integer patientRelativeId,                                      Authentication authentication) throws TeleCareException {        if (patientRelativeId == null)            FnCommon.throwsErrorApp(ErrorApp.ERR_DATA_PATIENT_INFO);        Boolean isPatientRelativeExist = patientsRepositoryJPA.existsById(patientRelativeId);        if (!isPatientRelativeExist)            FnCommon.throwsErrorApp(ErrorApp.ERR_DATA_PATIENT_RELATIVE_NOT_EXIST);        // current patient logged        Integer currentPatientId = patientsServiceJPA.getUserIdFromToken(authentication);        Boolean authenticated = patientsServiceJPA.checkAuthentication(patientId, currentPatientId);        // TODO thêm mã lỗi        if (!authenticated) {            FnCommon.throwsErrorApp(ErrorApp.ERR_USER_NOT_PERMISSION);        }        Boolean hasRelationship = patientsServiceJPA.checkRelationship(patientRelativeId, currentPatientId);        // TODO thêm mã lỗi        if (!hasRelationship) {            FnCommon.throwsErrorApp(ErrorApp.ERR_PATIENT_RELATIONSHIP_NOT_EXIST);        }        deleteByPatientIdAndPatientParentId(patientRelativeId, patientId);    }}