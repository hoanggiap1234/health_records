package com.viettel.etc.services.tables;import com.viettel.etc.dto.InsuranceDTO;import com.viettel.etc.repositories.tables.PatientsHealthinsurancesRepositoryJPA;import com.viettel.etc.repositories.tables.PatientsRepositoryJPA;import com.viettel.etc.repositories.tables.entities.PatientsHealthinsurancesEntity;import com.viettel.etc.services.InsuranceService;import com.viettel.etc.utils.ErrorApp;import com.viettel.etc.utils.FnCommon;import com.viettel.etc.utils.TeleCareException;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.security.core.Authentication;import org.springframework.stereotype.Service;import java.util.Optional;/** * Autogen class: Create Service For Table Name Patients_healthinsurances * * @author ToolGen * @date Tue Aug 18 10:12:25 ICT 2020 */@Servicepublic class PatientsHealthinsurancesServiceJPA {    @Autowired    PatientsHealthinsurancesRepositoryJPA patients_healthinsurances;    @Autowired    PatientsServiceJPA patientServiceJPA;    @Autowired    InsuranceService insuranceService;    @Autowired    PatientsRepositoryJPA patientRepositoryJPA;    @Autowired    PatientsRelationshipsServiceJPA patientRelationshipServiceJPA;//    public List<PatientsHealthinsurancesEntity> findAll() {//        return this.patients_healthinsurances.findAll();//    }    public PatientsHealthinsurancesEntity save(PatientsHealthinsurancesEntity Patients_healthinsurances) {        return this.patients_healthinsurances.save(Patients_healthinsurances);    }    public Optional<PatientsHealthinsurancesEntity> findById(Integer id) {        return this.patients_healthinsurances.findById(id);    }//    public void deleteById(Integer id) {//        this.patients_healthinsurances.deleteById(id);//    }//    public PatientsHealthinsurancesEntity getOne(Integer id) {//        return this.patients_healthinsurances.getOne(id);//    }    public Boolean existsById(Integer id) {        return this.patients_healthinsurances.existsById(id);    }    public Object createInsuranceInfo(Integer patientId, InsuranceDTO insuranceDTO, Authentication authentication) throws TeleCareException {        Boolean checkFromDate = FnCommon.isNull(insuranceDTO.getFromDate());        Boolean checkToDate = FnCommon.isNull(insuranceDTO.getToDate());        if (checkFromDate || checkToDate) {            FnCommon.throwsErrorApp(ErrorApp.ERROR_DATE_NULL);        }        // if insurance exist => throw exception        Boolean isInsuranceExist = existsById(insuranceDTO.getPatientId());        if (isInsuranceExist) {            //TODO: tra ve thong tin bao hiem da ton tai            FnCommon.throwsErrorApp(ErrorApp.ERROR_INPUTPARAMS);        }        // current patient logged        Integer currentPatientId = patientServiceJPA.getUserIdFromToken(authentication);        Boolean authenticated = patientServiceJPA.checkAuthentication(patientId, currentPatientId);        // TODO thêm mã lỗi        if (!authenticated) {            FnCommon.throwsErrorApp(ErrorApp.ERR_USER_NOT_PERMISSION);        }        Boolean isPatientRelativeExist = patientRepositoryJPA.existsById(insuranceDTO.getPatientId());        if (!isPatientRelativeExist)            FnCommon.throwsErrorApp(ErrorApp.ERR_DATA_PATIENT_NOT_EXIST);        Boolean hasRelationship = patientServiceJPA.checkRelationship(insuranceDTO.getPatientId(),                currentPatientId);        // TODO thêm mã lỗi        if (!hasRelationship) {            FnCommon.throwsErrorApp(ErrorApp.ERR_PATIENT_RELATIONSHIP_NOT_EXIST);        }//        PatientsHealthinsurancesEntity patientHealthInsuranceEntity = (PatientsHealthinsurancesEntity)//                FnCommon.convertObjectToObject(insuranceDTO, PatientsHealthinsurancesEntity.class);        Boolean hasHealthInsurance = patients_healthinsurances.existsByPatientId(insuranceDTO.getPatientId());        // TODO nếu tồn tại bảo hiểm rồi thì không cho thêm mới        if (hasHealthInsurance) {            FnCommon.throwsErrorApp(ErrorApp.ERROR_INPUTPARAMS);        }//        PatientsHealthinsurancesEntity patientHealthInsuranceDB = this.save(patientHealthInsuranceEntity);        return insuranceService.getInsuranceInfo(patientId, insuranceDTO, authentication);    }    public Object updateInsuranceInfo(Integer patientId, InsuranceDTO insuranceDTO, Authentication authentication)            throws TeleCareException {        // current patient logged        Integer currentPatientId = patientServiceJPA.getUserIdFromToken(authentication);        Boolean authenticated = patientServiceJPA.checkAuthentication(patientId, currentPatientId);        // TODO thêm mã lỗi        if (!authenticated) {            FnCommon.throwsErrorApp(ErrorApp.ERR_USER_NOT_PERMISSION);        }        Boolean hasRelationship = patientServiceJPA.checkRelationship(insuranceDTO.getPatientId(),                currentPatientId);        // TODO thêm mã lỗi        if (!hasRelationship) {            FnCommon.throwsErrorApp(ErrorApp.ERR_PATIENT_RELATIONSHIP_NOT_EXIST);        }        PatientsHealthinsurancesEntity patientHealthInsuranceEntity = patients_healthinsurances                .findByPatientId(insuranceDTO.getPatientId());        if (patientHealthInsuranceEntity == null) {            //TODO: không tồn tại bảo hiểm của người muốn update            FnCommon.throwsErrorApp(ErrorApp.ERROR_INPUTPARAMS);        }        FnCommon.copyProperties(insuranceDTO, patientHealthInsuranceEntity);//        PatientsHealthinsurancesEntity patientHealthInsuranceDB = this.save(patientHealthInsuranceEntity);        return insuranceService.getInsuranceInfo(patientId, insuranceDTO, authentication);    }    public Boolean existsByHealthinsuranceNumberAndPatientIdNot(String healthinsuranceNumber, Integer patientId) {        return patients_healthinsurances.existsByHealthinsuranceNumberAndPatientIdNot(healthinsuranceNumber, patientId);    }    public Object validateHealthInsuranceNumber(InsuranceDTO insuranceDTO) throws TeleCareException {        String healthInsuranceNumber = insuranceDTO.getHealthinsuranceNumber();        if (healthInsuranceNumber == null) {            throw new TeleCareException(ErrorApp.ERR_DATA_HEALTH_INSURANCE_NUMBER_REQUIRE);        }        InsuranceDTO result = new InsuranceDTO();        if (healthInsuranceNumber.length() != 15) {            FnCommon.throwsErrorApp(ErrorApp.ERR_DATA_HEALTH_INSURANCE_NUMBER_VALIDATE);        }        Boolean isExist = patients_healthinsurances.existsByHealthinsuranceNumberAndIsActiveAndIsDelete(insuranceDTO.getHealthinsuranceNumber(),                1, 0);        result.setIsExist(isExist);        return result;    }    public PatientsHealthinsurancesEntity findByPatientId(Integer patientId) {        return patients_healthinsurances.findByPatientId(patientId);    }}