package com.viettel.etc.services.tables;import com.viettel.etc.dto.*;import com.viettel.etc.repositories.tables.MedicalHealthcareRegimensRepositoryJPA;import com.viettel.etc.repositories.tables.entities.MedicalHealthcareRegimensDetailsEntity;import com.viettel.etc.repositories.tables.entities.MedicalHealthcareRegimensEntity;import com.viettel.etc.repositories.tables.entities.SysUsersEntity;import com.viettel.etc.services.MedicalHealthcareRegimenService;import com.viettel.etc.utils.*;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.security.core.Authentication;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.util.ArrayList;import java.util.Date;import java.util.List;/** * Autogen class: Create Service For Table Name Medical_healthcare_regimens * * @author ToolGen * @date Tue Oct 13 09:50:36 ICT 2020 */@Servicepublic class MedicalHealthcareRegimensServiceJPA {	@Autowired	MedicalHealthcareRegimensRepositoryJPA medical_healthcare_regimens;	@Autowired	RegimensGroupsServiceJPA regimenGroupServiceJPA;	@Autowired	RegimensServiceJPA regimenServiceJPA;	@Autowired	SysUsersServiceJPA sysUserServiceJPA;	@Autowired	MedicalHealthcareRegimensDetailsServiceJPA medicalHealthcareRegimensDetailServiceJPA;	@Autowired	MedicalHealthcareRegimenService medicalHealthcareRegimenService;	@Transactional(rollbackFor = Exception.class)	public Object createHealthcareRegimens(RegimenRequestDTO regimenRequestDTO, Authentication authentication) throws TeleCareException {		TelecareUserEntity userEntity = FnCommon.getTelecareUserInfo(authentication);		if (!userEntity.isDoctor()) {			FnCommon.throwsErrorApp(ErrorApp.ERR_USER_NOT_PERMISSION);		}		Boolean regimenGroupExist = regimenGroupServiceJPA.existsByGroupId(regimenRequestDTO.getGroupId());		if (!regimenGroupExist) {			FnCommon.throwsErrorApp(ErrorApp.ERR_REGIMEN_GROUP_NOT_EXIST);		}		Boolean regimenExist = regimenServiceJPA.existsByRegimenId(regimenRequestDTO.getRegimenId());		if (!regimenExist) {			FnCommon.throwsErrorApp(ErrorApp.ERR_REGIMEN_GROUP_NOT_EXIST);		}		// get doctor id		String keycloakUserId = FnCommon.getUserIdLogin(authentication);		SysUsersEntity sysUserEntity = sysUserServiceJPA.findByKeycloakUserId(keycloakUserId);		if (sysUserEntity.getType() != Constants.SYS_USER_DOCTOR) {			FnCommon.throwsErrorApp(ErrorApp.ERROR_INPUTPARAMS);		}		Integer doctorId = sysUserEntity.getId();		regimenRequestDTO.setDoctorId(doctorId);		MedicalHealthcareRegimensEntity medicalHealthcareRegimenEntity = new MedicalHealthcareRegimensEntity();		medicalHealthcareRegimenEntity.setCreateUserId(sysUserEntity.getUserId());		FnCommon.copyProperties(regimenRequestDTO, medicalHealthcareRegimenEntity);		MedicalHealthcareRegimensEntity medicalHealthcareRegimenDB = medical_healthcare_regimens.save(medicalHealthcareRegimenEntity);		List<MedicalHealthcareRegimensDetailsEntity> medicalHealthcareRegimensDetailEntities = new ArrayList<>();		for (RegimenDetailRequestDTO regimenDetailRequestDTO : regimenRequestDTO.getRegimens()) {			regimenDetailRequestDTO.validateRegimenSubDTO();			MedicalHealthcareRegimensDetailsEntity medicalHealthcareRegimensDetailEntity = new MedicalHealthcareRegimensDetailsEntity();			medicalHealthcareRegimensDetailEntity.setCreateUserId(sysUserEntity.getUserId());			medicalHealthcareRegimensDetailEntity.setPatientRegimenId(medicalHealthcareRegimenDB.getPatientRegimenId());			FnCommon.copyProperties(regimenDetailRequestDTO, medicalHealthcareRegimensDetailEntity);			medicalHealthcareRegimensDetailEntities.add(medicalHealthcareRegimensDetailEntity);		}		Date minFromDate = medicalHealthcareRegimensDetailEntities.stream().map(u -> u.getFromDate()).min(Date::compareTo).get();		Date maxToDate = medicalHealthcareRegimensDetailEntities.stream().map(u -> u.getToDate()).max(Date::compareTo).get();		int daysBetweenFromDateAndToDate = FnCommon.getDaysBetweenDates(minFromDate, maxToDate);		medicalHealthcareRegimenDB.setTotalTime(daysBetweenFromDateAndToDate);		medicalHealthcareRegimenDB.setFromDate(minFromDate);		medicalHealthcareRegimenDB.setToDate(maxToDate);		medical_healthcare_regimens.save(medicalHealthcareRegimenEntity);		if (!medicalHealthcareRegimensDetailEntities.isEmpty()) {			medicalHealthcareRegimensDetailServiceJPA.saveAll(medicalHealthcareRegimensDetailEntities);		}		ResponseDTO responseDTO = new ResponseDTO();		responseDTO.setCode(Constants.SUCCESS_CODE);		responseDTO.setMess("Bạn đã thêm mới phác đồ điều trị cho bệnh nhân {Tên bệnh nhân} thành công!");		return responseDTO;	}	@Transactional(rollbackFor = Exception.class)	public Object updateHealthcareRegimens(MedicalHealthcareRegimenDTO medicalHealthcareRegimenDTO, Authentication authentication) throws TeleCareException {		TelecareUserEntity userEntity = FnCommon.getTelecareUserInfo(authentication);		if (!userEntity.isDoctor()) {			FnCommon.throwsErrorApp(ErrorApp.ERR_USER_NOT_PERMISSION);		}		Boolean regimenGroupExist = regimenGroupServiceJPA.existsByGroupId(medicalHealthcareRegimenDTO.getGroupId());		if (!regimenGroupExist) {			FnCommon.throwsErrorApp(ErrorApp.ERR_REGIMEN_GROUP_NOT_EXIST);		}		Integer patientId = medicalHealthcareRegimenDTO.getPatientId();		Integer patientRegimenId = medicalHealthcareRegimenDTO.getPatientRegimenId();		boolean patientHasRegimen = medical_healthcare_regimens.existsByPatientIdAndPatientRegimenIdAndIsDelete(				patientId, patientRegimenId, Constants.IS_NOT_DELETE);		if (!patientHasRegimen) {			FnCommon.throwsErrorApp(ErrorApp.ERR_PATIENT_NOT_HAS_REGIMEN);		}		boolean executed = medical_healthcare_regimens.existsByPatientRegimenIdAndFromDateLessThanEqualAndIsActiveAndIsDelete(				patientRegimenId, new Date(),				Constants.IS_ACTIVE, Constants.IS_NOT_DELETE);		if (executed) {			FnCommon.throwsErrorApp(ErrorApp.ERR_REGIMEN_EXECUTED);		}		MedicalHealthcareRegimensEntity medicalHealthcareRegimenEntity = medical_healthcare_regimens.				findById(patientRegimenId).orElse(null);		if (medicalHealthcareRegimenEntity == null) {			throw new TeleCareException(ErrorApp.ERR_MEDICAL_HEALTHCARE_REGIMEN_NOT_EXIST);		}		// get sys user		String keycloakUserId = FnCommon.getUserIdLogin(authentication);		SysUsersEntity sysUserEntity = sysUserServiceJPA.findByKeycloakUserId(keycloakUserId);		Integer sysUserId = sysUserEntity.getUserId();		// update medical healthcare regimen detail		List<MedicalHealthcareRegimensDetailsEntity> medicalHealthcareRegimenDetailEntities = new ArrayList<>();		for (MedicalHealthcareRegimenDetailDTO regimenDetailDTO : medicalHealthcareRegimenDTO.getRegimens()) {			regimenDetailDTO.validateRegimenSubDTO();//            MedicalHealthcareRegimensDetailsEntity medicalHealthcareRegimenDetailsEntity = medicalHealthcareRegimensDetailServiceJPA//                    .findById(regimenDetailDTO.getDetailId());			MedicalHealthcareRegimensDetailsEntity medicalHealthcareRegimenDetailsEntity = (MedicalHealthcareRegimensDetailsEntity) FnCommon.convertObjectToObject					(regimenDetailDTO, MedicalHealthcareRegimensDetailsEntity.class);//            if (medicalHealthcareRegimenDetailsEntity == null) {//                FnCommon.throwsErrorApp(ErrorApp.ERR_REGIMEN_DETAIL_NOT_EXIST);//            }//            FnCommon.copyProperties(regimenDetailDTO, medicalHealthcareRegimenDetailsEntity);			medicalHealthcareRegimenDetailsEntity.setUpdateUserId(sysUserId);			medicalHealthcareRegimenDetailEntities.add(medicalHealthcareRegimenDetailsEntity);		}		// update medical healthcare regimen		FnCommon.copyProperties(medicalHealthcareRegimenDTO, medicalHealthcareRegimenEntity);		medicalHealthcareRegimenEntity.setUpdateUserId(sysUserId);		Date minFromDate = medicalHealthcareRegimenDetailEntities.stream().map(u -> u.getFromDate()).min(Date::compareTo).get();		Date maxToDate = medicalHealthcareRegimenDetailEntities.stream().map(u -> u.getToDate()).max(Date::compareTo).get();		int daysBetweenFromDateAndToDate = FnCommon.getDaysBetweenDates(minFromDate, maxToDate);		medicalHealthcareRegimenEntity.setTotalTime(daysBetweenFromDateAndToDate);		medicalHealthcareRegimenEntity.setFromDate(minFromDate);		medicalHealthcareRegimenEntity.setToDate(maxToDate);		medical_healthcare_regimens.save(medicalHealthcareRegimenEntity);		if (!medicalHealthcareRegimenDetailEntities.isEmpty()) {			medicalHealthcareRegimensDetailServiceJPA.saveAll(medicalHealthcareRegimenDetailEntities);		}		return medicalHealthcareRegimenService.getDetailHealthcareRegimensAfterUpdate(medicalHealthcareRegimenDTO);	}	@Transactional(rollbackFor = Exception.class)	public Object deletePatientRegimen(MedicalHealthcareRegimenDTO medicalHealthcareRegimenDTO, Authentication authentication) throws TeleCareException {		Integer patientRegimenId = medicalHealthcareRegimenDTO.getPatientRegimenId();		Integer patientId = medicalHealthcareRegimenDTO.getPatientId();		boolean patientHasRegimen = medical_healthcare_regimens.existsByPatientIdAndPatientRegimenIdAndIsDelete(				patientId,				patientRegimenId,				Constants.IS_NOT_DELETE);		if (!patientHasRegimen) {			FnCommon.throwsErrorApp(ErrorApp.ERR_PATIENT_NOT_HAS_REGIMEN);		}		// check executed		boolean executed = medical_healthcare_regimens.existsByPatientRegimenIdAndFromDateLessThanEqualAndIsActiveAndIsDelete(patientRegimenId,				new Date(),				Constants.IS_ACTIVE,				Constants.IS_NOT_DELETE);		if (executed) {			FnCommon.throwsErrorApp(ErrorApp.ERR_REGIMEN_EXECUTED);		}		// check regimen exist		MedicalHealthcareRegimensEntity medicalHealthcareRegimenEntity = medical_healthcare_regimens.findByPatientRegimenIdAndIsActiveAndIsDelete(				patientRegimenId,				Constants.IS_ACTIVE,				Constants.IS_NOT_DELETE);		if (medicalHealthcareRegimenEntity == null) {			throw new TeleCareException(ErrorApp.ERR_MEDICAL_HEALTHCARE_REGIMEN_NOT_EXIST);		}		// get sys user		String keycloakUserId = FnCommon.getUserIdLogin(authentication);		SysUsersEntity sysUserEntity = sysUserServiceJPA.findByKeycloakUserId(keycloakUserId);		Integer sysUserId = sysUserEntity.getUserId();		// delete regimen entity		medicalHealthcareRegimenEntity.setIsDelete(Constants.IS_DELETE);		medicalHealthcareRegimenEntity.setUpdateUserId(sysUserId);		medical_healthcare_regimens.save(medicalHealthcareRegimenEntity);		// delete list regimen detail entity		List<MedicalHealthcareRegimensDetailsEntity> medicalHealthcareRegimensDetailEntities = medicalHealthcareRegimensDetailServiceJPA.findByPatientRegimenId(				patientRegimenId);		for (MedicalHealthcareRegimensDetailsEntity entity : medicalHealthcareRegimensDetailEntities) {			entity.setIsDelete(Constants.IS_DELETE);			entity.setUpdateUserId(sysUserId);		}		medicalHealthcareRegimensDetailServiceJPA.saveAll(medicalHealthcareRegimensDetailEntities);		ResponseDTO responseDTO = new ResponseDTO();		responseDTO.setCode(Constants.SUCCESS_CODE);		responseDTO.setMess("Xóa phác đồ điều trị thành công");		return responseDTO;	}}